{"config":{"lang":["en"],"separator":"[\\s\\-]+","pipeline":["stopWordFilter"]},"docs":[{"location":"","title":"Overview","text":"<p>Welcome to the JetCo library documentation! JetCo is your ultimate Open-Source partner for crafting visually stunning, interactive, and efficient UI components in Android apps. \ud83d\udca1 Designed specifically for Jetpack Compose enthusiasts, JetCo is here to make your life easier, your apps prettier, and your users happier. \ud83d\ude0a</p> <p> </p>"},{"location":"#what-is-jetco","title":"\ud83c\udfaf What is JetCo?","text":"<p>JetCo is your go-to library for effortlessly adding complex yet elegant UI components into your Android apps. \u2728 Forget the headaches of custom implementations \u2014 JetCo\u2019s got your back with everything from beautiful charts to customizable components, all in just a few lines of code. \ud83d\udcbb </p>"},{"location":"#key-features","title":"\ud83c\udf89 Key Features","text":"<ul> <li>\ud83d\udd8c Modern UI Components: Bring your app to life with sleek charts, like Column Bar Charts, Pie Charts, and more!</li> <li>\u26a1\ufe0f Seamless Jetpack Compose Integration: Say goodbye to compatibility nightmares, JetCo works flawlessly with Jetpack Compose.</li> <li>\ud83d\udee0 Customization Galore: Tweak and fine-tune every element to fit your design like a glove. </li> <li>\ud83d\ude80 Performance Optimized: Fast and lightweight, JetCo handles big data with ease (so your app doesn\u2019t cry under pressure \ud83e\udd72).</li> </ul>"},{"location":"#supported-ui-components","title":"\ud83d\udcca Supported UI Components","text":"<p>JetCo currently offers a growing lineup of snazzy chart components to make your UI pop:</p> \ud83e\uddc1 Component \ud83c\udf6d Description Pie Chart Slice and dice your data into a tasty pie chart format. \ud83e\udd67 Column Bar Chart Perfect for showing data as bars with full customization. \ud83d\udcca Extended Column Bar Chart Need more power? Extend that bar chart with extra goodies! \ud83d\udd25 Group Column Bar Chart Compare multiple data sets side by side in grouped bars. \ud83e\udd13 <p>Check out the examples below to see JetCo in action!</p> <p>Pie Chart</p> <p>Column Bar Chart</p> <p>Extended Column Bar Chart</p> <p>Group Column Bar Chart</p>"},{"location":"#getting-started","title":"\ud83d\ude80 Getting Started","text":"<p>Want to get started right away? We've got your back! \ud83c\udfc3\u200d\u2642\ufe0f Head over to the Sample section for installation instructions, sample code, and to see how easy it is to integrate JetCo components. You\u2019ll be building gorgeous UIs in no time! \u23f1</p>"},{"location":"#need-a-guide","title":"\ud83e\udded Need a guide?","text":"<p>If you prefer more guidance, check out our Guide section for tips, tricks, and in-depth customization details.</p>"},{"location":"#why-choose-jetco","title":"\ud83d\ude0e Why Choose JetCo?","text":"<ul> <li>It's easy to use. Seriously, no PhD required! </li> <li>It\u2019s fast and lightweight, so your app stays buttery smooth \ud83e\uddc8.</li> <li>You get beautiful, highly customizable components \u2014 your users will thank you. \ud83d\ude4f</li> </ul> <p>No matter if you\u2019re working on a personal project or building the next unicorn \ud83e\udd84, JetCo gives you the tools to create a jaw-dropping UI.</p> <p>For more details on how to make the most out of JetCo, dive into our Sample and Guide sections.</p>"},{"location":"#contribute-to-jetco","title":"\ud83e\udd1d Contribute to JetCo","text":"<p>Feel like giving back to the JetCo community? Join us! Check out the Community section to see how you can contribute to the library and make it even better. \ud83d\udc69\u200d\ud83d\udcbb\ud83d\udc68\u200d\ud83d\udcbb</p>"},{"location":"License/","title":"License under Apache License, Version 2.0","text":"<pre><code>                                 Apache License\n                           Version 2.0, January 2004\n                        http://www.apache.org/licenses/\n\n   TERMS AND CONDITIONS FOR USE, REPRODUCTION, AND DISTRIBUTION\n\n   1. Definitions.\n\n      \"License\" shall mean the terms and conditions for use, reproduction,\n      and distribution as defined by Sections 1 through 9 of this document.\n\n      \"Licensor\" shall mean the copyright owner or entity authorized by\n      the copyright owner that is granting the License.\n\n      \"Legal Entity\" shall mean the union of the acting entity and all\n      other entities that control, are controlled by, or are under common\n      control with that entity. For the purposes of this definition,\n      \"control\" means (i) the power, direct or indirect, to cause the\n      direction or management of such entity, whether by contract or\n      otherwise, or (ii) ownership of fifty percent (50%) or more of the\n      outstanding shares, or (iii) beneficial ownership of such entity.\n\n      \"You\" (or \"Your\") shall mean an individual or Legal Entity\n      exercising permissions granted by this License.\n\n      \"Source\" form shall mean the preferred form for making modifications,\n      including but not limited to software source code, documentation\n      source, and configuration files.\n\n      \"Object\" form shall mean any form resulting from mechanical\n      transformation or translation of a Source form, including but\n      not limited to compiled object code, generated documentation,\n      and conversions to other media types.\n\n      \"Work\" shall mean the work of authorship, whether in Source or\n      Object form, made available under the License, as indicated by a\n      copyright notice that is included in or attached to the work\n      (an example is provided in the Appendix below).\n\n      \"Derivative Works\" shall mean any work, whether in Source or Object\n      form, that is based on (or derived from) the Work and for which the\n      editorial revisions, annotations, elaborations, or other modifications\n      represent, as a whole, an original work of authorship. For the purposes\n      of this License, Derivative Works shall not include works that remain\n      separable from, or merely link (or bind by name) to the interfaces of,\n      the Work and Derivative Works thereof.\n\n      \"Contribution\" shall mean any work of authorship, including\n      the original version of the Work and any modifications or additions\n      to that Work or Derivative Works thereof, that is intentionally\n      submitted to Licensor for inclusion in the Work by the copyright owner\n      or by an individual or Legal Entity authorized to submit on behalf of\n      the copyright owner. For the purposes of this definition, \"submitted\"\n      means any form of electronic, verbal, or written communication sent\n      to the Licensor or its representatives, including but not limited to\n      communication on electronic mailing lists, source code control systems,\n      and issue tracking systems that are managed by, or on behalf of, the\n      Licensor for the purpose of discussing and improving the Work, but\n      excluding communication that is conspicuously marked or otherwise\n      designated in writing by the copyright owner as \"Not a Contribution.\"\n\n      \"Contributor\" shall mean Licensor and any individual or Legal Entity\n      on behalf of whom a Contribution has been received by Licensor and\n      subsequently incorporated within the Work.\n\n   2. Grant of Copyright License. Subject to the terms and conditions of\n      this License, each Contributor hereby grants to You a perpetual,\n      worldwide, non-exclusive, no-charge, royalty-free, irrevocable\n      copyright license to reproduce, prepare Derivative Works of,\n      publicly display, publicly perform, sublicense, and distribute the\n      Work and such Derivative Works in Source or Object form.\n\n   3. Grant of Patent License. Subject to the terms and conditions of\n      this License, each Contributor hereby grants to You a perpetual,\n      worldwide, non-exclusive, no-charge, royalty-free, irrevocable\n      (except as stated in this section) patent license to make, have made,\n      use, offer to sell, sell, import, and otherwise transfer the Work,\n      where such license applies only to those patent claims licensable\n      by such Contributor that are necessarily infringed by their\n      Contribution(s) alone or by combination of their Contribution(s)\n      with the Work to which such Contribution(s) was submitted. If You\n      institute patent litigation against any entity (including a\n      cross-claim or counterclaim in a lawsuit) alleging that the Work\n      or a Contribution incorporated within the Work constitutes direct\n      or contributory patent infringement, then any patent licenses\n      granted to You under this License for that Work shall terminate\n      as of the date such litigation is filed.\n\n   4. Redistribution. You may reproduce and distribute copies of the\n      Work or Derivative Works thereof in any medium, with or without\n      modifications, and in Source or Object form, provided that You\n      meet the following conditions:\n\n      (a) You must give any other recipients of the Work or\n          Derivative Works a copy of this License; and\n\n      (b) You must cause any modified files to carry prominent notices\n          stating that You changed the files; and\n\n      (c) You must retain, in the Source form of any Derivative Works\n          that You distribute, all copyright, patent, trademark, and\n          attribution notices from the Source form of the Work,\n          excluding those notices that do not pertain to any part of\n          the Derivative Works; and\n\n      (d) If the Work includes a \"NOTICE\" text file as part of its\n          distribution, then any Derivative Works that You distribute must\n          include a readable copy of the attribution notices contained\n          within such NOTICE file, excluding those notices that do not\n          pertain to any part of the Derivative Works, in at least one\n          of the following places: within a NOTICE text file distributed\n          as part of the Derivative Works; within the Source form or\n          documentation, if provided along with the Derivative Works; or,\n          within a display generated by the Derivative Works, if and\n          wherever such third-party notices normally appear. The contents\n          of the NOTICE file are for informational purposes only and\n          do not modify the License. You may add Your own attribution\n          notices within Derivative Works that You distribute, alongside\n          or as an addendum to the NOTICE text from the Work, provided\n          that such additional attribution notices cannot be construed\n          as modifying the License.\n\n      You may add Your own copyright statement to Your modifications and\n      may provide additional or different license terms and conditions\n      for use, reproduction, or distribution of Your modifications, or\n      for any such Derivative Works as a whole, provided Your use,\n      reproduction, and distribution of the Work otherwise complies with\n      the conditions stated in this License.\n\n   5. Submission of Contributions. Unless You explicitly state otherwise,\n      any Contribution intentionally submitted for inclusion in the Work\n      by You to the Licensor shall be under the terms and conditions of\n      this License, without any additional terms or conditions.\n      Notwithstanding the above, nothing herein shall supersede or modify\n      the terms of any separate license agreement you may have executed\n      with Licensor regarding such Contributions.\n\n   6. Trademarks. This License does not grant permission to use the trade\n      names, trademarks, service marks, or product names of the Licensor,\n      except as required for reasonable and customary use in describing the\n      origin of the Work and reproducing the content of the NOTICE file.\n\n   7. Disclaimer of Warranty. Unless required by applicable law or\n      agreed to in writing, Licensor provides the Work (and each\n      Contributor provides its Contributions) on an \"AS IS\" BASIS,\n      WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or\n      implied, including, without limitation, any warranties or conditions\n      of TITLE, NON-INFRINGEMENT, MERCHANTABILITY, or FITNESS FOR A\n      PARTICULAR PURPOSE. You are solely responsible for determining the\n      appropriateness of using or redistributing the Work and assume any\n      risks associated with Your exercise of permissions under this License.\n\n   8. Limitation of Liability. In no event and under no legal theory,\n      whether in tort (including negligence), contract, or otherwise,\n      unless required by applicable law (such as deliberate and grossly\n      negligent acts) or agreed to in writing, shall any Contributor be\n      liable to You for damages, including any direct, indirect, special,\n      incidental, or consequential damages of any character arising as a\n      result of this License or out of the use or inability to use the\n      Work (including but not limited to damages for loss of goodwill,\n      work stoppage, computer failure or malfunction, or any and all\n      other commercial damages or losses), even if such Contributor\n      has been advised of the possibility of such damages.\n\n   9. Accepting Warranty or Additional Liability. While redistributing\n      the Work or Derivative Works thereof, You may choose to offer,\n      and charge a fee for, acceptance of support, warranty, indemnity,\n      or other liability obligations and/or rights consistent with this\n      License. However, in accepting such obligations, You may act only\n      on Your own behalf and on Your sole responsibility, not on behalf\n      of any other Contributor, and only if You agree to indemnify,\n      defend, and hold each Contributor harmless for any liability\n      incurred by, or claims asserted against, such Contributor by reason\n      of your accepting any such warranty or additional liability.\n\n   END OF\n\n TERMS AND CONDITIONS\n\n   APPENDIX: How to apply the Apache License to your work.\n\n      To apply the Apache License to your work, attach the following\n      boilerplate notice, with the fields enclosed by brackets \"[]\"\n      replaced with your own identifying information. (Don't include\n      the brackets!)  The text should be enclosed in the appropriate\n      comment syntax for the file format. We also recommend that a\n      file or class name and description of purpose be included on the\n      same \"printed page\" as the copyright notice for easier\n      identification within third-party archives.\n\n   Copyright 2024 Developer Chunk\n\n   Licensed under the Apache License, Version 2.0 (the \"License\");\n   you may not use this file except in compliance with the License.\n   You may obtain a copy of the License at\n\n       http://www.apache.org/licenses/LICENSE-2.0\n\n   Unless required by applicable law or agreed to in writing, software\n   distributed under the License is distributed on an \"AS IS\" BASIS,\n   WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.\n   See the License for the specific language governing permissions and\n   limitations under the License.\n</code></pre>"},{"location":"community/","title":"Community","text":""},{"location":"community/#join-the-jetco-community","title":"\ud83c\udf1f Join the JetCo Community!","text":"<p>Hey there, fellow developer! \ud83d\udc4b Welcome to the JetCo Community, where we believe in the power of open-source collaboration, creativity, and a touch of fun. Whether you're here to contribute, report an issue, or just hang out, you\u2019re in the right place! \ud83e\udd73</p>"},{"location":"community/#open-source-goodness","title":"\ud83d\udee0 Open-Source Goodness!","text":"<p>JetCo is an open-source Jetpack Compose library, and guess what? It\u2019s licensed under the Apache 2.0 License. That means you\u2019re free to use it, modify it, and build cool stuff with it. Just give us a shout-out! \ud83d\udce2</p> <ul> <li>JetCo GitHub Repository</li> </ul>"},{"location":"community/#found-a-bug-report-it-on-github","title":"\ud83d\udc1b Found a Bug? Report it on GitHub!","text":"<p>Bugs can be like those sneaky errors that show up in your code at 3 AM. \ud83d\ude2b If you find one, help us squash it! You can easily report bugs or issues by creating a ticket on our GitHub Issues page.</p> <ul> <li>Report a Bug</li> </ul>"},{"location":"community/#docs-issue-we-got-you","title":"\ud83d\udcdd Docs Issue? We Got You!","text":"<p>Caught something in the documentation that seems a bit off or unclear? \ud83d\udcda Don\u2019t hesitate to let us know. We\u2019re always improving, and your feedback helps us make things clearer for everyone!</p> <ul> <li>Report Docs Issue</li> </ul>"},{"location":"community/#got-a-feature-request","title":"\ud83d\udca1 Got a Feature Request?","text":"<p>If you\u2019ve got a brilliant idea for a new feature or an enhancement to make JetCo even more awesome, we\u2019d love to hear about it! \ud83e\udd29 Request a feature or suggest changes, and let\u2019s build JetCo together!</p> <ul> <li>Request a Change</li> </ul>"},{"location":"community/#making-a-pull-request","title":"\ud83d\udd04 Making a Pull Request?","text":"<p>We love contributions! \ud83e\udd70 Whether it\u2019s fixing a bug, improving the docs, or adding a new feature, pull requests are always welcome. Just make sure to follow the contribution guidelines, and we\u2019ll review it ASAP.</p> <ul> <li>Contribute via Pull Request</li> </ul>"},{"location":"community/#how-to-contribute","title":"\ud83d\udcaa How to Contribute?","text":"<p>You can contribute to JetCo in many ways \u2014 not just by coding! \ud83d\udcbb Here\u2019s how you can help:</p> <ol> <li>JetCo Library Code Contributions: Fork the repo, write your amazing code, and send us a pull request.</li> <li>Documentation Contributions: Help us improve the docs by fixing typos, improving clarity, or adding new guides.</li> </ol> <p>Whether you\u2019re an experienced developer or a beginner, there\u2019s a place for you here. Let\u2019s make JetCo better, one commit at a time. \ud83d\ude4c</p> <ul> <li>Contribute to JetCo on GitHub</li> </ul>"},{"location":"community/#we-welcome-the-community","title":"\ud83e\udd1d We Welcome the Community!","text":"<p>We believe in the magic of collaboration! \u2728 So let\u2019s join hands togetherrrrrk (yes, extra R\u2019s for emphasis \ud83d\ude06). Whether you're reporting an issue, suggesting a feature, or contributing code, your involvement makes the JetCo community stronger and more vibrant!</p> <p>Feel free to reach out to us anytime at: \ud83d\udce7 Contact us: adityashinde5033@gmail.com</p> <p>We can\u2019t wait to see what you build with JetCo! \ud83c\udf89</p>"},{"location":"community/#license-under-apache-license-version-20","title":"License under Apache License, Version 2.0","text":"<pre><code>                                 Apache License\n                           Version 2.0, January 2004\n                        http://www.apache.org/licenses/\n\n   TERMS AND CONDITIONS FOR USE, REPRODUCTION, AND DISTRIBUTION\n\n   1. Definitions.\n\n      \"License\" shall mean the terms and conditions for use, reproduction,\n      and distribution as defined by Sections 1 through 9 of this document.\n\n      \"Licensor\" shall mean the copyright owner or entity authorized by\n      the copyright owner that is granting the License.\n\n      \"Legal Entity\" shall mean the union of the acting entity and all\n      other entities that control, are controlled by, or are under common\n      control with that entity. For the purposes of this definition,\n      \"control\" means (i) the power, direct or indirect, to cause the\n      direction or management of such entity, whether by contract or\n      otherwise, or (ii) ownership of fifty percent (50%) or more of the\n      outstanding shares, or (iii) beneficial ownership of such entity.\n\n      \"You\" (or \"Your\") shall mean an individual or Legal Entity\n      exercising permissions granted by this License.\n\n      \"Source\" form shall mean the preferred form for making modifications,\n      including but not limited to software source code, documentation\n      source, and configuration files.\n\n      \"Object\" form shall mean any form resulting from mechanical\n      transformation or translation of a Source form, including but\n      not limited to compiled object code, generated documentation,\n      and conversions to other media types.\n\n      \"Work\" shall mean the work of authorship, whether in Source or\n      Object form, made available under the License, as indicated by a\n      copyright notice that is included in or attached to the work\n      (an example is provided in the Appendix below).\n\n      \"Derivative Works\" shall mean any work, whether in Source or Object\n      form, that is based on (or derived from) the Work and for which the\n      editorial revisions, annotations, elaborations, or other modifications\n      represent, as a whole, an original work of authorship. For the purposes\n      of this License, Derivative Works shall not include works that remain\n      separable from, or merely link (or bind by name) to the interfaces of,\n      the Work and Derivative Works thereof.\n\n      \"Contribution\" shall mean any work of authorship, including\n      the original version of the Work and any modifications or additions\n      to that Work or Derivative Works thereof, that is intentionally\n      submitted to Licensor for inclusion in the Work by the copyright owner\n      or by an individual or Legal Entity authorized to submit on behalf of\n      the copyright owner. For the purposes of this definition, \"submitted\"\n      means any form of electronic, verbal, or written communication sent\n      to the Licensor or its representatives, including but not limited to\n      communication on electronic mailing lists, source code control systems,\n      and issue tracking systems that are managed by, or on behalf of, the\n      Licensor for the purpose of discussing and improving the Work, but\n      excluding communication that is conspicuously marked or otherwise\n      designated in writing by the copyright owner as \"Not a Contribution.\"\n\n      \"Contributor\" shall mean Licensor and any individual or Legal Entity\n      on behalf of whom a Contribution has been received by Licensor and\n      subsequently incorporated within the Work.\n\n   2. Grant of Copyright License. Subject to the terms and conditions of\n      this License, each Contributor hereby grants to You a perpetual,\n      worldwide, non-exclusive, no-charge, royalty-free, irrevocable\n      copyright license to reproduce, prepare Derivative Works of,\n      publicly display, publicly perform, sublicense, and distribute the\n      Work and such Derivative Works in Source or Object form.\n\n   3. Grant of Patent License. Subject to the terms and conditions of\n      this License, each Contributor hereby grants to You a perpetual,\n      worldwide, non-exclusive, no-charge, royalty-free, irrevocable\n      (except as stated in this section) patent license to make, have made,\n      use, offer to sell, sell, import, and otherwise transfer the Work,\n      where such license applies only to those patent claims licensable\n      by such Contributor that are necessarily infringed by their\n      Contribution(s) alone or by combination of their Contribution(s)\n      with the Work to which such Contribution(s) was submitted. If You\n      institute patent litigation against any entity (including a\n      cross-claim or counterclaim in a lawsuit) alleging that the Work\n      or a Contribution incorporated within the Work constitutes direct\n      or contributory patent infringement, then any patent licenses\n      granted to You under this License for that Work shall terminate\n      as of the date such litigation is filed.\n\n   4. Redistribution. You may reproduce and distribute copies of the\n      Work or Derivative Works thereof in any medium, with or without\n      modifications, and in Source or Object form, provided that You\n      meet the following conditions:\n\n      (a) You must give any other recipients of the Work or\n          Derivative Works a copy of this License; and\n\n      (b) You must cause any modified files to carry prominent notices\n          stating that You changed the files; and\n\n      (c) You must retain, in the Source form of any Derivative Works\n          that You distribute, all copyright, patent, trademark, and\n          attribution notices from the Source form of the Work,\n          excluding those notices that do not pertain to any part of\n          the Derivative Works; and\n\n      (d) If the Work includes a \"NOTICE\" text file as part of its\n          distribution, then any Derivative Works that You distribute must\n          include a readable copy of the attribution notices contained\n          within such NOTICE file, excluding those notices that do not\n          pertain to any part of the Derivative Works, in at least one\n          of the following places: within a NOTICE text file distributed\n          as part of the Derivative Works; within the Source form or\n          documentation, if provided along with the Derivative Works; or,\n          within a display generated by the Derivative Works, if and\n          wherever such third-party notices normally appear. The contents\n          of the NOTICE file are for informational purposes only and\n          do not modify the License. You may add Your own attribution\n          notices within Derivative Works that You distribute, alongside\n          or as an addendum to the NOTICE text from the Work, provided\n          that such additional attribution notices cannot be construed\n          as modifying the License.\n\n      You may add Your own copyright statement to Your modifications and\n      may provide additional or different license terms and conditions\n      for use, reproduction, or distribution of Your modifications, or\n      for any such Derivative Works as a whole, provided Your use,\n      reproduction, and distribution of the Work otherwise complies with\n      the conditions stated in this License.\n\n   5. Submission of Contributions. Unless You explicitly state otherwise,\n      any Contribution intentionally submitted for inclusion in the Work\n      by You to the Licensor shall be under the terms and conditions of\n      this License, without any additional terms or conditions.\n      Notwithstanding the above, nothing herein shall supersede or modify\n      the terms of any separate license agreement you may have executed\n      with Licensor regarding such Contributions.\n\n   6. Trademarks. This License does not grant permission to use the trade\n      names, trademarks, service marks, or product names of the Licensor,\n      except as required for reasonable and customary use in describing the\n      origin of the Work and reproducing the content of the NOTICE file.\n\n   7. Disclaimer of Warranty. Unless required by applicable law or\n      agreed to in writing, Licensor provides the Work (and each\n      Contributor provides its Contributions) on an \"AS IS\" BASIS,\n      WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or\n      implied, including, without limitation, any warranties or conditions\n      of TITLE, NON-INFRINGEMENT, MERCHANTABILITY, or FITNESS FOR A\n      PARTICULAR PURPOSE. You are solely responsible for determining the\n      appropriateness of using or redistributing the Work and assume any\n      risks associated with Your exercise of permissions under this License.\n\n   8. Limitation of Liability. In no event and under no legal theory,\n      whether in tort (including negligence), contract, or otherwise,\n      unless required by applicable law (such as deliberate and grossly\n      negligent acts) or agreed to in writing, shall any Contributor be\n      liable to You for damages, including any direct, indirect, special,\n      incidental, or consequential damages of any character arising as a\n      result of this License or out of the use or inability to use the\n      Work (including but not limited to damages for loss of goodwill,\n      work stoppage, computer failure or malfunction, or any and all\n      other commercial damages or losses), even if such Contributor\n      has been advised of the possibility of such damages.\n\n   9. Accepting Warranty or Additional Liability. While redistributing\n      the Work or Derivative Works thereof, You may choose to offer,\n      and charge a fee for, acceptance of support, warranty, indemnity,\n      or other liability obligations and/or rights consistent with this\n      License. However, in accepting such obligations, You may act only\n      on Your own behalf and on Your sole responsibility, not on behalf\n      of any other Contributor, and only if You agree to indemnify,\n      defend, and hold each Contributor harmless for any liability\n      incurred by, or claims asserted against, such Contributor by reason\n      of your accepting any such warranty or additional liability.\n\n   END OF\n\n TERMS AND CONDITIONS\n\n   APPENDIX: How to apply the Apache License to your work.\n\n      To apply the Apache License to your work, attach the following\n      boilerplate notice, with the fields enclosed by brackets \"[]\"\n      replaced with your own identifying information. (Don't include\n      the brackets!)  The text should be enclosed in the appropriate\n      comment syntax for the file format. We also recommend that a\n      file or class name and description of purpose be included on the\n      same \"printed page\" as the copyright notice for easier\n      identification within third-party archives.\n\n   Copyright 2024 Developer Chunk\n\n   Licensed under the Apache License, Version 2.0 (the \"License\");\n   you may not use this file except in compliance with the License.\n   You may obtain a copy of the License at\n\n       http://www.apache.org/licenses/LICENSE-2.0\n\n   Unless required by applicable law or agreed to in writing, software\n   distributed under the License is distributed on an \"AS IS\" BASIS,\n   WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.\n   See the License for the specific language governing permissions and\n   limitations under the License.\n</code></pre>"},{"location":"guide/jetco-ui/jetco-ui/","title":"JetCo-UI Guide","text":"\ud83c\udf89 Welcome to the JetCo-UI Guide! <p>Buckle up and get ready to dive into the world of JetCo-UI, where powerful, flexible components meet user-friendly design. Whether you're a beginner or a seasoned pro, this guide will serve as your ultimate roadmap to mastering the art of creating stunning UI elements with JetCo-UI.</p> <p>This guide is your go-to for everything JetCo-UI offers. Here's what you'll find:</p> <ul> <li>\ud83e\udde9 Components: Get to know the building blocks of JetCo-UI and how to assemble them into slick, responsive UIs.</li> <li>\ud83d\udcdd Parameters: Learn how to fine-tune every aspect of your components, from colors and sizes to interactions.</li> <li>\ud83d\udee0\ufe0f Data Classes: Discover the data structures that power your UI, enabling smooth state management and dynamic content.</li> <li>\ud83d\udca1 Usages: Need a quick reference or example? We\u2019ve got real-world usage examples to guide you through every step.</li> <li>\ud83c\udfa8 Customizations: Want to add your own flair? No problem! We\u2019ll show you how to tweak and personalize everything to match your vision.</li> <li>\u2699\ufe0f Defaults &amp; Utilities: Tap into sensible defaults to get started quickly, or use JetCo-UI\u2019s utilities to supercharge your workflow.</li> </ul> <p>Whether you're looking to explore the basics or push the limits with customizations, this guide has got your back! \ud83d\ude80</p> Ready to get started? <p>Head over to the Left Navigation and pick your desired section. Each chapter is packed with examples, tips, and tricks to help you unlock the full potential of JetCo-UI. Let\u2019s build something amazing! \ud83c\udfa8\ud83d\udcbb</p>"},{"location":"guide/jetco-ui/Bar%20Chart/ColumnBarChart/","title":"ColumnBarChart","text":"<p>The <code>ColumnBarChart()</code> function is your go-to for creating stunning, customizable column bar charts with JetCo! It allows you to represent data with vertical bars, supports animations, grid lines, interactive pop-ups, and more. The chart is super flexible, giving you tons of options to tweak its look and feel. Let's dive in! \ud83d\ude80</p>"},{"location":"guide/jetco-ui/Bar%20Chart/ColumnBarChart/#parameters","title":"Parameters","text":"Parameter Type Default Description <code>modifier</code> <code>Modifier</code> <code>Modifier</code> Modifier for the entire chart layout. <code>chartData</code> <code>Map&lt;String, Float&gt;</code> <code>-</code> Data for the chart, where each key is an X-axis label and the value is the bar height. <code>barChartConfig</code> <code>BarChartConfig</code> <code>BarChartDefaults.columnBarChartConfig()</code> Customize the bars' appearance (color, shape, etc.). <code>yAxisConfig</code> <code>YAxisConfig</code> <code>BarChartDefaults.yAxisConfig()</code> Y-axis scale, labels, and line configuration. <code>xAxisConfig</code> <code>XAxisConfig</code> <code>BarChartDefaults.xAxisConfig()</code> X-axis scale, labels, and line configuration. <code>popUpConfig</code> <code>PopUpConfig</code> <code>BarChartDefaults.popUpConfig()</code> Configure pop-ups for interacting with bars and labels. <code>gridLineStyle</code> <code>GridLineStyle</code> <code>BarChartDefaults.gridLineStyle()</code> Style for the grid lines behind the bars. <code>maxBarValue</code> <code>Float?</code> <code>null</code> The maximum value for scaling the bars. If null, the highest value in <code>chartData</code> is used. <code>enableAnimation</code> <code>Boolean</code> <code>true</code> Whether to animate the bars when they load. <code>enterAnimation</code> <code>EnterTransition</code> <code>BarChartDefaults.enterTransitionVertically</code> Animation for bars entering the screen. <code>exitAnimation</code> <code>ExitTransition</code> <code>shrinkVertically()</code> Animation for bars exiting the screen. <code>maxTextLengthXAxis</code> <code>Int</code> <code>6</code> Maximum length of X-axis label text (will be truncated with \"..\"). <code>enableTextRotate</code> <code>Boolean</code> <code>true</code> Whether to rotate the X-axis label text. <code>textRotateAngle</code> <code>Float</code> <code>-60f</code> Rotation angle for X-axis labels. <code>enableGridLines</code> <code>Boolean</code> <code>true</code> Whether to display grid lines. <code>scrollEnable</code> <code>Boolean</code> <code>true</code> Enable or disable horizontal scrolling of the chart. <code>onBarClicked</code> <code>((Pair&lt;String, Float&gt;) -&gt; Unit)?</code> <code>null</code> Callback when a bar is clicked, passing the bar's label and value. <code>onXAxisLabelClicked</code> <code>((Pair&lt;String, Float&gt;) -&gt; Unit)?</code> <code>null</code> Callback when an X-axis label is clicked."},{"location":"guide/jetco-ui/Bar%20Chart/ColumnBarChart/#how-to-use","title":"How to Use \ud83d\udc69\u200d\ud83d\udcbb","text":"<p>To create a bar chart, pass your data and customize the chart using the configuration options. It's easy\u2014just provide the data, tweak the look, and watch the magic happen! \u2728</p> <p>Here's a simple usage example:</p> <pre><code>ColumnBarChart(\n    chartData = mapOf(\"Mon\" to 10f, \"Tue\" to 15f, \"Wed\" to 25f), // Your data\n    enableTextRotate = true, // Rotate the X-axis labels for better readability\n    onBarClicked = { bar -&gt; println(\"You clicked on ${bar.first} with value ${bar.second}\") } // Handle bar clicks\n)\n</code></pre>"},{"location":"guide/jetco-ui/Bar%20Chart/ColumnBarChart/#default-values-via-barchartdefaults","title":"Default Values via BarChartDefaults","text":"<p>JetCo makes things easier with the BarChartDefaults class, which provides default values for many parameters so you don't have to set everything manually. If you want to get started quickly, you can rely on these defaults and customize only what\u2019s necessary.</p> <p>For example, the following code uses the default configuration for bars, X-axis, Y-axis, and pop-ups:</p> <pre><code>ColumnBarChart(\n    chartData = mapOf(\"Jan\" to 50f, \"Feb\" to 70f, \"Mar\" to 65f)\n)\n</code></pre> <ul> <li>\ud83c\udfa8 Bar Appearance: Default height, width, shape, and color are set using BarChartDefaults.columnBarChartConfig().</li> <li>\ud83d\udcca Axes: The X-axis and Y-axis configurations are handled by BarChartDefaults.xAxisConfig() and BarChartDefaults.yAxisConfig(), respectively.</li> <li>\ud83d\udca5 Pop-ups: If you don't need custom pop-ups, the default configuration from BarChartDefaults.popUpConfig() is ready to go.</li> </ul>"},{"location":"guide/jetco-ui/Bar%20Chart/ColumnBarChart/#customization-example-using-configurations","title":"\ud83c\udfa8 Customization Example Using Configurations:","text":"<p>For those moments when you want to go beyond the default look and feel of your chart, you can step up your game by customizing every part of it! \ud83d\udcaa Below is an example of a fully tricked-out chart with all the bells and whistles.</p> <pre><code>ExtendedColumnBarChart(\n    chartData = mapOf(\"Jan\" to 50f, \"Feb\" to 60f, \"Mar\" to 80f), // Your data, your way!\n\n    // \ud83d\udfe5 Bar Customization: Control the size, color, and shape of each bar\n    barChartConfig = BarChartConfig(\n        height = 200.dp,    // Tall bars, because why not?\n        width = 40.dp,      // Make 'em wide!\n        color = Color.Red,  // Red\u2014bold and attention-grabbing!\n        shape = RoundedCornerShape(8.dp) // Rounded corners for that smooth look \ud83e\uddc8\n    ),\n\n    // \ud83d\udccf Y-Axis Customization: Scale, lines, and style to match your theme\n    yAxisConfig = YAxisConfig(\n        axisScaleCount = 5,          // Five scales along the Y-axis\n        isAxisScaleEnabled = true,   // Show the scale because it matters!\n        axisLineColor = Color.Gray,  // Keep those axis lines sleek and neutral\n        axisLineWidth = 2.dp         // Make the axis line a bit thicker for visibility\n    ),\n\n    // \ud83d\udcd0 X-Axis Customization: Make your labels and lines pop!\n    xAxisConfig = XAxisConfig(\n        isAxisLineEnabled = true,    // Show the X-axis line\n        textStyle = TextStyle(\n            color = Color.Blue,      // Make the labels blue \ud83d\udc99\n            fontSize = 12.sp         // And just the right size\n        ),\n        axisLineColor = Color.Gray,  // Matching the Y-axis line color\n        axisLineWidth = 2.dp         // Same thickness for a consistent feel\n    ),\n\n    // \ud83c\udf88 Pop-Up Customization: Add interactive pop-ups when hovering over bars!\n    popUpConfig = PopUpConfig(\n        enableBarPopUp = true,       // Enable pop-ups for bars\n        background = Color.White,    // Clean, white background for pop-up readability\n        textStyle = TextStyle(\n            color = Color.Black      // Black text to keep it sharp\n        )\n    ),\n\n    // \ud83c\udfac Animations: Smooth transitions to keep your chart engaging\n    enableAnimation = true,          // Enable animation because everything looks better with movement!\n    enterAnimation = fadeIn(),       // Bars fade in with style\n    exitAnimation = fadeOut(),       // And they fade out smoothly when needed\n\n    // \ud83d\udcca Grid Lines: Let\u2019s keep those bars aligned!\n    enableGridLines = true,          // Turn on grid lines for better reference\n    gridLineStyle = GridLineStyle(\n        color = Color.LightGray,     // Keep the grid lines subtle\n        lineWidth = 1.dp             // Thin lines for a minimalist look\n    ),\n\n    // \ud83d\udd20 Label and Rotation: Got longer labels? Rotate and fit them!\n    maxTextLengthXAxis = 8,          // Truncate the labels if they exceed 8 characters\n    enableTextRotate = true,         // Rotate the text for better space management\n    textRotateAngle = -45f,          // Rotate it to a nice -45 degrees for readability\n\n    // \ud83d\uddb1\ufe0f Interactivity: Let users click on bars and handle events!\n    onBarClicked = { bar -&gt;          // Click event handler for bars\n        println(\"Clicked bar: ${bar.first}, value: ${bar.second}\") // Simple console log\n    }\n)\n</code></pre>"},{"location":"guide/jetco-ui/Bar%20Chart/ColumnBarChart/#breaking-down-the-magic","title":"\ud83d\udd0d Breaking Down the Magic\u2728","text":"<p>\ud83c\udfa8 Bar Customization: - Use BarChartConfig to adjust the height, width, color, and even the shape of your bars. Rounded corners, sharp edges, big, small\u2014your call! - In this example, we\u2019re rocking a bold red color, giving the bars a sleek, smooth look with rounded corners. \ud83d\udc4c</p> <p>\ud83d\udccf Axis Customization: - With XAxisConfig and YAxisConfig, you have full control over scaling, line styles, and label formatting. - Set the number of Y-axis scales, decide whether the lines show up, and style those X-axis labels any way you like (hello, blue text! \ud83d\udc99).</p> <p>\ud83c\udf88 Pop-Up Customization: - Let your bars talk! Configure pop-ups with PopUpConfig to display additional information when a user hovers or clicks. Perfect for deeper insights on each bar. - In this example, we\u2019re keeping it clean with a white background and black text for readability.</p> <p>\ud83c\udfac Animations: - Animations are always a crowd-pleaser. Set your bars to fade in and fade out to add a bit of drama and interactivity to your chart. - It\u2019s like rolling out the red carpet for your data. \ud83c\udf1f</p> <p>\ud83d\udcca Grid Lines: - Add grid lines to give users a visual guide for comparing bar heights. You can fully customize the grid line color and thickness using GridLineStyle. - Here, we\u2019ve gone for a light gray color to keep things subtle and unobtrusive.</p> <p>\ud83d\udd20 Labels and Rotation: - Have labels that are too long for your X-axis? No worries! You can rotate them for better fit and readability using <code>textRotateAngle</code>. - In this case, the labels are rotated -45 degrees to save space and improve the aesthetic. \ud83d\udcd0</p> <p>\ud83d\uddb1\ufe0f Interactivity: - Lastly, make your bars clickable! You can assign a custom callback to handle what happens when a user clicks on a bar with <code>onBarClicked</code>. - In this example, we\u2019re printing the label and value of the clicked bar to the console for easy debugging.  </p>"},{"location":"guide/jetco-ui/Bar%20Chart/ColumnBarChart/#why-use-custom-configurations","title":"\ud83d\ude80 Why Use Custom Configurations?","text":"<p>The ExtendedColumnBarChart is perfect for developers who want full control over their data visualizations. Whether it\u2019s crafting stunning visual styles or adding complex interactivity, you can tailor everything to fit your exact needs. With custom bar shapes, axis configurations, animations, and more, you\u2019ll always have the flexibility to create the perfect chart for your project.</p> <ul> <li>Quick Setup: Don\u2019t want to dive into every detail? No problem! You can use the built-in defaults from BarChartDefaults to get a chart up and running in no time.</li> <li>Advanced Use Cases: Need to handle longer data labels? Want custom-designed bars and pop-ups? You got it! Every component can be customized to match your vision. \ud83d\udd25</li> </ul> <p>So, go ahead and let your charts shine with style, interactivity, and rich functionality. \ud83c\udf1f</p> <p>Not sure how to use ColumnBarChart? \ud83e\uddd0</p> <p>Explore the detailed sample code and implementation of <code>ColumnBarChart</code> in the Sample section.</p> <p>Advanced Customization: ExtendedColumnBarChart</p> <p>If you want even more control over your bar chart's behavior and style, you should check out the ExtendedColumnBarChart. This extended version offers extra customization for complex use cases where the default and basic configurations may not be enough.</p> <ul> <li>More Animations: Customize how bars animate, not just when entering or exiting.</li> <li>Enhanced Styling: Further fine-tune every part of the chart, including specific grid line behavior, custom bar shapes, and multi-level axis scales.</li> <li>Detailed Interaction: Add multiple interaction points, tooltips, and advanced pop-ups for a richer user experience.</li> </ul> <p>Enjoy creating beautiful, interactive bar charts with JetCo! If you have any questions or feedback, don't hesitate to reach out. Happy coding! \ud83d\ude0e\ud83c\udf89</p>"},{"location":"guide/jetco-ui/Bar%20Chart/ExtendedColumnBarChart/","title":"Extended Column Bar Chart","text":"<p>The <code>ExtendedColumnBarChart</code> is like the superhero version of the regular ColumnBarChart\u2014more powerful, customizable, and ready to save the day! \ud83e\uddb8\u200d\u2642\ufe0f It offers detailed control over each component, so you can fine-tune everything from bars and axes to pop-ups and user interactions, or just let BarChartDefaults do the heavy lifting for you. Either way, this chart has got your back!</p>"},{"location":"guide/jetco-ui/Bar%20Chart/ExtendedColumnBarChart/#parameters-overview","title":"Parameters Overview \ud83d\udccb","text":"<p>Here's your all-star cast of parameters:</p> Parameter Type Default Description <code>modifier</code> <code>Modifier</code> <code>Modifier</code> Apply a modifier to the chart container\u2014because, why not? \ud83d\ude43 <code>chartData</code> <code>Map&lt;String, Float&gt;</code> <code>-</code> The data that makes this chart come to life. Think of it as the chart's breakfast. \ud83c\udf73 <code>barChartConfig</code> <code>BarChartConfig</code> <code>BarChartDefaults.columnBarChartConfig()</code> Dress up your bars with a full wardrobe of options. \ud83d\udc83 <code>yAxisConfig</code> <code>YAxisConfig</code> <code>BarChartDefaults.yAxisConfig()</code> Set the stage for your Y-axis. Scale it, label it, or just make it look snazzy! \ud83c\udfa9 <code>xAxisConfig</code> <code>XAxisConfig</code> <code>BarChartDefaults.xAxisConfig()</code> Same deal for the X-axis. Short labels? Long ones? You decide! \ud83d\udccf <code>popUpConfig</code> <code>PopUpConfig</code> <code>BarChartDefaults.popUpConfig()</code> Who doesn\u2019t love a good pop-up? Give your users more info when they click! \ud83d\udca1 <code>gridLineStyle</code> <code>GridLineStyle</code> <code>BarChartDefaults.gridLineStyle()</code> Add some classy grid lines so your bars aren\u2019t just floating in the void. \ud83d\udcca <code>maxBarValue</code> <code>Float?</code> <code>null</code> Cap it like a boss: set the maximum bar value for better scaling. \ud83c\udf9b\ufe0f <code>enableAnimation</code> <code>Boolean</code> <code>true</code> Enable animations\u2014because who doesn't love a dramatic entrance? \ud83c\udfac <code>enterAnimation</code> <code>EnterTransition</code> <code>BarChartDefaults.enterTransitionVertically</code> Let your bars glide in with style! \ud83d\udefc <code>exitAnimation</code> <code>ExitTransition</code> <code>shrinkVertically()</code> When it's time to go, make those bars leave with dignity. \ud83d\udd74\ufe0f <code>maxTextLengthXAxis</code> <code>Int</code> <code>6</code> Short and sweet\u2014truncate those long labels like a pro. \u2702\ufe0f <code>enableTextRotate</code> <code>Boolean</code> <code>true</code> Tired of horizontal text? Spin those labels! \ud83c\udfa1 <code>textRotateAngle</code> <code>Float</code> <code>-60f</code> Spin it right round\u2014set the rotation angle of your labels. \ud83c\udf00 <code>enableGridLines</code> <code>Boolean</code> <code>true</code> Add grid lines\u2014because no chart should be without some boundaries. \ud83d\udee0\ufe0f <code>scrollEnable</code> <code>Boolean</code> <code>true</code> Got too much data? Let your users scroll through it all! \ud83d\udcdc <code>onBarClicked</code> <code>((Pair&lt;String, Float&gt;) -&gt; Unit)?</code> <code>null</code> Let users interact with your bars\u2014trigger callbacks when they click! \ud83c\udfaf <code>onXAxisLabelClicked</code> <code>((Pair&lt;String, Float&gt;) -&gt; Unit)?</code> <code>null</code> Same goes for X-axis labels\u2014because we don\u2019t discriminate. \ud83d\uddb1\ufe0f <code>barDesign</code> <code>(@Composable (text: String) -&gt; Unit)?</code> <code>null</code> Feeling artsy? Go wild and design your own bars! \ud83c\udfa8 <code>gridLine</code> <code>(@Composable () -&gt; Unit)?</code> <code>null</code> Want custom grid lines? Sure, why not? \ud83e\udde9 <code>barPopUp</code> <code>(@Composable (text: String) -&gt; Unit)?</code> <code>null</code> Want a unique bar pop-up? Go ahead and customize it like a pro. \ud83c\udf88 <code>labelPopUp</code> <code>(@Composable (text: String) -&gt; Unit)?</code> <code>null</code> Same goes for the X-axis label pop-up\u2014customize it to your heart\u2019s content. \ud83c\udf81 <code>yAxisScaleLabel</code> <code>(@Composable (value: String) -&gt; Unit)?</code> <code>null</code> Craft your own Y-axis labels and make your data stand out! \ud83d\udcca"},{"location":"guide/jetco-ui/Bar%20Chart/ExtendedColumnBarChart/#when-to-use","title":"When to Use \ud83e\udd14","text":"<p>So, when should you unleash the mighty <code>ExtendedColumnBarChart</code>? Here are a few telltale signs:</p> <ul> <li>You want your bars to look like they came straight out of an art gallery. \ud83d\uddbc\ufe0f</li> <li>You need pop-ups that pop, not flop. \ud83c\udf89</li> <li>You\u2019ve got more data than your screen can handle and need that sweet horizontal scroll. \ud83d\udcdc</li> <li>You crave some next-level animations that will make your charts dance. \ud83d\udc83\ud83d\udd7a</li> </ul>"},{"location":"guide/jetco-ui/Bar%20Chart/ExtendedColumnBarChart/#how-to-use","title":"How to Use \ud83d\udc69\u200d\ud83d\udcbb","text":"<p>Using this beast is easy peasy. \ud83e\udd73 Just provide your data, set a few configs (or don\u2019t, we\u2019ve got sensible defaults for you), and watch your chart come to life.</p> <pre><code>@Composable\nfun ExtendedColumnBarChartExample() {\n    val chartData = listOf(\n        Pair(\"Test-1\", 50f),\n        Pair(\"Test-2\", 80f),\n        Pair(\"Test-3.beta\", 30f),\n        Pair(\"Test-4\", 90f),\n        Pair(\"Test-5\", 45f),\n    )\n\n    ExtendedColumnBarChart(\n        modifier = Modifier,\n        chartData = chartData,\n        maxTextLengthXAxis = 6, // Short and sweet!\n        maxBarValue = 100f, // Set your bar heights here.\n        yAxisScaleLabel = { value -&gt;\n            Card(\n                colors = CardDefaults.cardColors(PurpleGrey80),\n                shape = RoundedCornerShape(20)\n            ) {\n                Text(text = value) // Show off those Y-axis labels!\n            }\n        },\n        barPopUp = { text -&gt;\n            PopUpLayout(text = text) // Let your bars speak for themselves.\n        },\n        labelPopUp = { text -&gt;\n            PopUpLayout(text = text) // Your X-axis labels need love too!\n        },\n        barDesign = { text -&gt;\n            val decimalFormat = DecimalFormat(\"##.##\").format(text.toFloat())\n            Card(\n                modifier = Modifier.fillMaxSize(),\n                colors = CardDefaults.cardColors(containerColor = Pink40),\n                elevation = CardDefaults.elevatedCardElevation(defaultElevation = 20.dp)\n            ) {\n                Spacer(modifier = Modifier.height(10.dp))\n                Text(\n                    text = decimalFormat,\n                    modifier = Modifier.rotate(-90f),\n                    color = Color.White\n                )\n            }\n        }\n    )\n}\n\n@Composable\nfun PopUpLayout(text: String) {\n    Box(\n        modifier = Modifier\n            .clip(shape = RoundedCornerShape(100))\n            .background(LightBlue)\n    ) {\n        Box(\n            modifier = Modifier\n                .padding(8.dp)\n                .clip(shape = RoundedCornerShape(100))\n                .background(UIBlue),\n            contentAlignment = Alignment.Center\n        ) {\n            Text(\n                modifier = Modifier.padding(5.dp),\n                text = text,\n                color = Color.White\n            )\n        }\n    }\n}\n</code></pre>"},{"location":"guide/jetco-ui/Bar%20Chart/ExtendedColumnBarChart/#custom-bar-design","title":"Custom Bar Design \ud83c\udfa8","text":"<p>Want to make your bars fabulous? You can easily provide a custom <code>Composable</code> in the <code>barDesign</code> parameter. Think of it like giving your bars their own little fashion show! \ud83d\udc83\ud83d\udc57</p> <pre><code>ExtendedColumnBarChart(\n    chartData = mapOf(\"Apr\" to 45f, \"May\" to 70f, \"Jun\" to 85f),\n    barDesign = { barValue -&gt;\n        Text(\n            text = \"Value: $barValue\",\n            modifier = Modifier\n                .background(Color.Green)\n                .padding(8.dp)\n        )\n    }\n)\n</code></pre>"},{"location":"guide/jetco-ui/Bar%20Chart/ExtendedColumnBarChart/#custom-pop-up-design","title":"Custom Pop-Up Design \ud83c\udf88","text":"<p>Who says pop-ups have to be boring? With <code>ExtendedColumnBarChart</code>, you can create pop-ups as unique as your data.</p> <pre><code>ExtendedColumnBarChart(\n    chartData = mapOf(\"Q1\" to 30f, \"Q2\" to 55f, \"Q3\" to 65f),\n    barPopUp = { text -&gt;\n        Box(\n            modifier = Modifier\n                .background(Color.LightGray)\n                .padding(8.dp)\n        ) {\n            Text(text = \"Bar Value: $text\")\n        }\n    }\n)\n</code></pre> <p>Customize Everything!</p> <p>You can also tweak the grid lines, X-axis labels, and Y-axis scale labels. The world is your oyster! \ud83e\uddaa</p>"},{"location":"guide/jetco-ui/Bar%20Chart/ExtendedColumnBarChart/#example-with-default-values","title":"Example with Default Values \ud83d\udee0\ufe0f","text":"<p>Don't feel like getting too fancy? No</p> <p>problem! You can let the defaults do the work.</p> <pre><code>ExtendedColumnBarChart(\n    chartData = mapOf(\"Mon\" to 15f, \"Tue\" to 25f, \"Wed\" to 35f)\n)\n</code></pre> <p>By default, the chart will:</p> <ul> <li>Display bars with a default height, width, and color from BarChartDefaults.columnBarChartConfig().</li> <li>Use default axis configurations via BarChartDefaults.xAxisConfig() and BarChartDefaults.yAxisConfig().</li> <li>Show pop-ups when bars or labels are clicked, using the default pop-up configuration from BarChartDefaults.popUpConfig().</li> <li>Show grid lines behind the bars using BarChartDefaults.gridLineStyle().</li> </ul>"},{"location":"guide/jetco-ui/Bar%20Chart/ExtendedColumnBarChart/#customization-example-using-configurations","title":"\ud83c\udfa8 Customization Example Using Configurations:","text":"<p>For those moments when you want to go beyond the default look and feel of your chart, you can step up your game by customizing every part of it! \ud83d\udcaa Below is an example of a fully tricked-out chart with all the bells and whistles.</p> <pre><code>ExtendedColumnBarChart(\n    chartData = mapOf(\"Jan\" to 50f, \"Feb\" to 60f, \"Mar\" to 80f), // Your data, your way!\n\n    // \ud83d\udfe5 Bar Customization: Control the size, color, and shape of each bar\n    barChartConfig = BarChartConfig(\n        height = 200.dp,    // Tall bars, because why not?\n        width = 40.dp,      // Make 'em wide!\n        color = Color.Red,  // Red\u2014bold and attention-grabbing!\n        shape = RoundedCornerShape(8.dp) // Rounded corners for that smooth look \ud83e\uddc8\n    ),\n\n    // \ud83d\udccf Y-Axis Customization: Scale, lines, and style to match your theme\n    yAxisConfig = YAxisConfig(\n        axisScaleCount = 5,          // Five scales along the Y-axis\n        isAxisScaleEnabled = true,   // Show the scale because it matters!\n        axisLineColor = Color.Gray,  // Keep those axis lines sleek and neutral\n        axisLineWidth = 2.dp         // Make the axis line a bit thicker for visibility\n    ),\n\n    // \ud83d\udcd0 X-Axis Customization: Make your labels and lines pop!\n    xAxisConfig = XAxisConfig(\n        isAxisLineEnabled = true,    // Show the X-axis line\n        textStyle = TextStyle(\n            color = Color.Blue,      // Make the labels blue \ud83d\udc99\n            fontSize = 12.sp         // And just the right size\n        ),\n        axisLineColor = Color.Gray,  // Matching the Y-axis line color\n        axisLineWidth = 2.dp         // Same thickness for a consistent feel\n    ),\n\n    // \ud83c\udf88 Pop-Up Customization: Add interactive pop-ups when hovering over bars!\n    popUpConfig = PopUpConfig(\n        enableBarPopUp = true,       // Enable pop-ups for bars\n        background = Color.White,    // Clean, white background for pop-up readability\n        textStyle = TextStyle(\n            color = Color.Black      // Black text to keep it sharp\n        )\n    ),\n\n    // \ud83c\udfac Animations: Smooth transitions to keep your chart engaging\n    enableAnimation = true,          // Enable animation because everything looks better with movement!\n    enterAnimation = fadeIn(),       // Bars fade in with style\n    exitAnimation = fadeOut(),       // And they fade out smoothly when needed\n\n    // \ud83d\udcca Grid Lines: Let\u2019s keep those bars aligned!\n    enableGridLines = true,          // Turn on grid lines for better reference\n    gridLineStyle = GridLineStyle(\n        color = Color.LightGray,     // Keep the grid lines subtle\n        lineWidth = 1.dp             // Thin lines for a minimalist look\n    ),\n\n    // \ud83d\udd20 Label and Rotation: Got longer labels? Rotate and fit them!\n    maxTextLengthXAxis = 8,          // Truncate the labels if they exceed 8 characters\n    enableTextRotate = true,         // Rotate the text for better space management\n    textRotateAngle = -45f,          // Rotate it to a nice -45 degrees for readability\n\n    // \ud83d\uddb1\ufe0f Interactivity: Let users click on bars and handle events!\n    onBarClicked = { bar -&gt;          // Click event handler for bars\n        println(\"Clicked bar: ${bar.first}, value: ${bar.second}\") // Simple console log\n    }\n)\n</code></pre>"},{"location":"guide/jetco-ui/Bar%20Chart/ExtendedColumnBarChart/#breaking-down-the-magic","title":"\ud83d\udd0d Breaking Down the Magic \u2728","text":"<p>\ud83c\udfa8 Bar Customization: - Use BarChartConfig to adjust the height, width, color, and even the shape of your bars. Rounded corners, sharp edges, big, small\u2014your call! - In this example, we\u2019re rocking a bold red color, giving the bars a sleek, smooth look with rounded corners. \ud83d\udc4c</p> <p>\ud83d\udccf Axis Customization: - With XAxisConfig and YAxisConfig, you have full control over scaling, line styles, and label formatting. - Set the number of Y-axis scales, decide whether the lines show up, and style those X-axis labels any way you like (hello, blue text! \ud83d\udc99).</p> <p>\ud83c\udf88 Pop-Up Customization: - Let your bars talk! Configure pop-ups with PopUpConfig to display additional information when a user hovers or clicks. Perfect for deeper insights on each bar. - In this example, we\u2019re keeping it clean with a white background and black text for readability.</p> <p>\ud83c\udfac Animations: - Animations are always a crowd-pleaser. Set your bars to fade in and fade out to add a bit of drama and interactivity to your chart. - It\u2019s like rolling out the red carpet for your data. \ud83c\udf1f</p> <p>\ud83d\udcca Grid Lines: - Add grid lines to give users a visual guide for comparing bar heights. You can fully customize the grid line color and thickness using GridLineStyle. - Here, we\u2019ve gone for a light gray color to keep things subtle and unobtrusive.</p> <p>\ud83d\udd20 Labels and Rotation: - Have labels that are too long for your X-axis? No worries! You can rotate them for better fit and readability using <code>textRotateAngle</code>. - In this case, the labels are rotated -45 degrees to save space and improve the aesthetic. \ud83d\udcd0</p> <p>\ud83d\uddb1\ufe0f Interactivity: - Lastly, make your bars clickable! You can assign a custom callback to handle what happens when a user clicks on a bar with <code>onBarClicked</code>. - In this example, we\u2019re printing the label and value of the clicked bar to the console for easy debugging.  </p>"},{"location":"guide/jetco-ui/Bar%20Chart/ExtendedColumnBarChart/#why-use-custom-configurations","title":"\ud83d\ude80 Why Use Custom Configurations?","text":"<p>The <code>ExtendedColumnBarChart</code> is perfect for developers who want full control over their data visualizations. Whether it\u2019s crafting stunning visual styles or adding complex interactivity, you can tailor everything to fit your exact needs. With custom bar shapes, axis configurations, animations, and more, you\u2019ll always have the flexibility to create the perfect chart for your project.</p> <ul> <li>Quick Setup: Don\u2019t want to dive into every detail? No problem! You can use the built-in defaults from BarChartDefaults to get a chart up and running in no time.</li> <li>Advanced Use Cases: Need to handle longer data labels? Want custom-designed bars and pop-ups? You got it! Every component can be customized to match your vision. \ud83d\udd25</li> </ul> <p>Not sure how to use ExtendedColumnBarChart? \ud83e\uddd0</p> <p>Explore the detailed sample code and implementation of <code>ExtendedColumnBarChart</code> in the Sample section.</p> <p>So, go ahead and let your charts shine with style, interactivity, and rich functionality. \ud83c\udf1f</p> <p>Whether you're looking to build a sleek, stylish chart or just need something quick and functional, <code>ExtendedColumnBarChart</code> has you covered. So go on, unleash your creativity\u2014and your charts will thank you! \ud83c\udfa8\ud83d\udcca</p> <p>Enjoy crafting your epic charts! Happy coding! \ud83d\ude0e</p> <p>Here's an enhanced and fun version of your \"Customization Example using Configurations\":</p>"},{"location":"guide/jetco-ui/Bar%20Chart/GroupColumnBarChart/","title":"Group Column Bar Chart","text":""},{"location":"guide/jetco-ui/Bar%20Chart/GroupColumnBarChart/#groupcolumnbarchart-component","title":"<code>GroupColumnBarChart</code> Component","text":"<p>The <code>GroupColumnBarChart()</code> is an advanced and customizable grouped column bar chart that you can use to visualize grouped data with multiple bars in each group. This composable is perfect for scenarios where you need to compare different sets of data within various categories. It's built to be flexible, allowing you to configure animations, axis styles, colors, popups, and more!</p> <pre><code>@Composable\nfun GroupColumnBarChart(\n    modifier: Modifier = Modifier,\n    chartData: Map&lt;String, List&lt;Float&gt;&gt;,\n    groupBarChartConfig: GroupBarChartConfig = BarChartDefaults.groupBarChartConfig(),\n    yAxisConfig: YAxisConfig = BarChartDefaults.yAxisConfig(),\n    xAxisConfig: XAxisConfig = BarChartDefaults.xAxisConfig(),\n    popUpConfig: PopUpConfig = BarChartDefaults.popUpConfig(),\n    gridLineStyle: GridLineStyle = BarChartDefaults.gridLineStyle(),\n    maxBarValue: Float? = null,\n    enableAnimation: Boolean = true,\n    enterAnimation: EnterTransition = BarChartDefaults.enterTransitionVertically,\n    exitAnimation: ExitTransition = shrinkVertically(),\n    maxTextLengthXAxis: Int = 6,\n    enableTextRotate: Boolean = false,\n    textRotateAngle: Float = -60f,\n    enableGridLines: Boolean = true,\n    scrollEnable: Boolean = true,\n    onBarClicked: ((Pair&lt;String, Float&gt;) -&gt; Unit)? = null,\n    onXAxisLabelClicked: ((Pair&lt;String, List&lt;Float&gt;&gt;) -&gt; Unit)? = null\n)\n</code></pre> <p>This function lets developers create group-based bar charts. Let's dive into what makes this chart tick! \ud83c\udf89</p>"},{"location":"guide/jetco-ui/Bar%20Chart/GroupColumnBarChart/#parameters","title":"Parameters","text":"Parameter Type Default Description <code>modifier</code> <code>Modifier</code> <code>Modifier</code> Customize the layout and appearance of the chart. <code>chartData</code> <code>Map&lt;String, List&lt;Float&gt;&gt;</code> Required Your dataset. Each key represents a group label, and the list of floats are the values for the bars within that group. <code>groupBarChartConfig</code> <code>GroupBarChartConfig</code> <code>BarChartDefaults.groupBarChartConfig()</code> Configuration for how the bars are rendered, including colors, shapes, and dimensions. <code>yAxisConfig</code> <code>YAxisConfig</code> <code>BarChartDefaults.yAxisConfig()</code> Customize Y-axis with scale, line visibility, and styles. <code>xAxisConfig</code> <code>XAxisConfig</code> <code>BarChartDefaults.xAxisConfig()</code> Customize X-axis with labels, rotation, and visibility. <code>popUpConfig</code> <code>PopUpConfig</code> <code>BarChartDefaults.popUpConfig()</code> Control pop-ups when clicking bars or labels. <code>gridLineStyle</code> <code>GridLineStyle</code> <code>BarChartDefaults.gridLineStyle()</code> Customize grid lines that appear behind bars. <code>maxBarValue</code> <code>Float?</code> <code>null</code> Max value on the Y-axis. If <code>null</code>, it will be automatically calculated from the data. <code>enableAnimation</code> <code>Boolean</code> <code>true</code> Enable or disable chart animation. <code>enterAnimation</code> <code>EnterTransition</code> <code>BarChartDefaults.enterTransitionVertically</code> Specify the animation for bars as they enter the view. <code>exitAnimation</code> <code>ExitTransition</code> <code>shrinkVertically()</code> Define exit animation for bars. <code>maxTextLengthXAxis</code> <code>Int</code> <code>6</code> Maximum characters for X-axis labels. Longer labels are truncated with ellipsis. <code>enableTextRotate</code> <code>Boolean</code> <code>false</code> Rotate X-axis text for better readability. <code>textRotateAngle</code> <code>Float</code> <code>-60f</code> Angle for X-axis text rotation when <code>enableTextRotate</code> is <code>true</code>. <code>enableGridLines</code> <code>Boolean</code> <code>true</code> Show or hide grid lines behind the bars. <code>scrollEnable</code> <code>Boolean</code> <code>true</code> Enable horizontal scrolling for the chart. <code>onBarClicked</code> <code>((Pair&lt;String, Float&gt;) -&gt; Unit)?</code> <code>null</code> Callback triggered when a bar is clicked. Returns the group label and the bar value. <code>onXAxisLabelClicked</code> <code>((Pair&lt;String, List&lt;Float&gt;&gt;) -&gt; Unit)?</code> <code>null</code> Callback triggered when an X-axis label is clicked. Returns the group label and the list of values for that group."},{"location":"guide/jetco-ui/Bar%20Chart/GroupColumnBarChart/#how-developers-can-use-it","title":"\ud83d\udca1 How Developers Can Use It","text":"<p>This component is for developers who want to showcase grouped data in a visually appealing way. Here's a quick guide on how to get started:</p> <ol> <li>Simple Usage:    Just pass your chart data as a <code>Map&lt;String, List&lt;Float&gt;&gt;</code> where the key is the group name and the list contains the values for the bars in that group.</li> </ol> <pre><code>val chartData = mapOf(\n    \"Category 1\" to listOf(4.5f, 3.0f, 2.0f),\n    \"Category 2\" to listOf(5.0f, 2.5f, 3.5f),\n    \"Category 3\" to listOf(4.0f, 1.5f, 4.5f)\n)\n\nGroupColumnBarChart(\n    chartData = chartData,\n    onBarClicked = { (category, value) -&gt;\n        println(\"Bar clicked in $category with value $value\")\n    }\n)\n</code></pre> <p>\ud83c\udfa8 With this, you\u2019ll have a basic grouped bar chart where each category contains multiple bars!</p> <ol> <li>Customize It Like a Pro:    Want more control over how the chart looks and behaves? Customize the axis, add animations, and tweak the layout!</li> </ol> <pre><code>GroupColumnBarChart(\n    chartData = chartData,\n    groupBarChartConfig = BarChartDefaults.groupBarChartConfig().copy(\n        colors = listOf(Color.Red, Color.Green, Color.Blue),\n        width = 20.dp\n    ),\n    yAxisConfig = BarChartDefaults.yAxisConfig().copy(\n        axisScaleCount = 5\n    ),\n    xAxisConfig = BarChartDefaults.xAxisConfig().copy(\n        textStyle = TextStyle(color = Color.Black, fontSize = 12.sp),\n        isAxisScaleEnabled = true\n    ),\n    enableGridLines = true,\n    enableAnimation = true\n)\n</code></pre> <ol> <li>Interactivity:    This component allows developers to easily add interactive elements like pop-ups and bar click actions. Enable pop-ups for more detailed data when users click a specific bar:</li> </ol> <pre><code>GroupColumnBarChart(\n    chartData = chartData,\n    popUpConfig = BarChartDefaults.popUpConfig().copy(enableBarPopUp = true),\n    onBarClicked = { (category, value) -&gt;\n        // Show a custom pop-up or perform any action\n    }\n)\n</code></pre> <ol> <li>Make the X-axis Stand Out:    Rotate the X-axis labels for better readability when you have long category names!</li> </ol> <pre><code>GroupColumnBarChart(\n    chartData = chartData,\n    enableTextRotate = true,\n    textRotateAngle = -45f\n)\n</code></pre>"},{"location":"guide/jetco-ui/Bar%20Chart/GroupColumnBarChart/#default-values-via-barchartdefaults","title":"Default Values via BarChartDefaults","text":"<p>JetCo makes things easier with the BarChartDefaults class, which provides default values for many parameters so you don't have to set everything manually. If you want to get started quickly, you can rely on these defaults and customize only what\u2019s necessary.</p> <p>For example, the following code uses the default configuration for bars, X-axis, Y-axis, and pop-ups:</p> <pre><code>ColumnBarChart(\n    chartData = mapOf(\n       \"Category 1\" to listOf(4.5f, 3.0f, 2.0f),\n       \"Category 2\" to listOf(5.0f, 2.5f, 3.5f),\n       \"Category 3\" to listOf(4.0f, 1.5f, 4.5f)\n    )\n)\n</code></pre> <ul> <li>\ud83c\udfa8 Bar Appearance: Default height, width, shape, and color are set using BarChartDefaults.groupBarChartConfig().</li> <li>\ud83d\udcca Axes: The X-axis and Y-axis configurations are handled by BarChartDefaults.xAxisConfig() and BarChartDefaults.yAxisConfig(), respectively.</li> <li>\ud83d\udca5 Pop-ups: If you don't need custom pop-ups, the default configuration from BarChartDefaults.popUpConfig() is ready to go.</li> </ul> <p>Not sure how to use GroupColumnBarChart? \ud83e\uddd0</p> <p>Explore the detailed sample code and implementation of <code>GroupColumnBarChart</code> in the Sample section.</p> <p>\ud83d\ude80 Pro Tips</p> <ul> <li>Scrollable Chart: If your categories exceed the screen width, enable scrolling using <code>scrollEnable = true</code>. It automatically lets users scroll horizontally to see all data points.</li> <li>Pop-up Details: Customize the pop-up for bars and X-axis labels to give users more context when they hover or click on them.</li> <li>Smooth Animations: Add engaging animations to your chart for a smoother user experience! (Tip: animation delays can help create a cascading effect when the chart loads.)</li> </ul> <p>Enjoy creating amazing grouped bar charts with <code>GroupColumnBarChart()</code>! Go ahead and give it a spin in your next data-driven project. \ud83d\udcca\ud83c\udfa8</p>"},{"location":"guide/jetco-ui/Bar%20Chart/components/","title":"Bar Chart Components","text":"<p>Hey, chart enthusiast! \ud83c\udfa8 Let's walk through how to use JetCo\u2019s UI components to create stunning bar charts with ease. No need to dig deep into the code \u2014 just follow these simple guides to integrate interactive and visually appealing chart elements into your app! \ud83d\ude80</p>"},{"location":"guide/jetco-ui/Bar%20Chart/components/#barchartpopup","title":"BarChartPopup \ud83d\udee0\ufe0f","text":"<p>What it does: The <code>BarChartPopup()</code> is your friendly neighborhood popup that shows detailed info when users tap on a specific bar in your bar chart. Perfect for showing additional data or tips! \ud83d\udca1</p> Usage Example: <pre><code>BarChartPopup(\n    popUpConfig = yourPopUpConfig, \n    text = \"Here\u2019s your info!\", \n    onDismissRequest = { /* handle dismiss */ }\n)\n</code></pre> Parameters: Parameter Type Default Description <code>popUpConfig</code> <code>PopUpConfig</code> Required Configuration for the popup (background, shape, etc.). <code>text</code> <code>String</code> Required The text you want to display inside the popup. <code>onDismissRequest</code> <code>() -&gt; Unit</code> Required Function to handle when the popup is dismissed."},{"location":"guide/jetco-ui/Bar%20Chart/components/#gridline","title":"GridLine \ud83c\udf10","text":"<p>What it does: The <code>GridLine()</code> component is used to create dashed or solid grid lines in your charts. These grid lines help users easily visualize data points on the chart. \ud83d\udccf</p> Usage Example: <pre><code>GridLine(\n    modifier = Modifier.padding(8.dp),\n    gridLineStyle = yourGridLineStyle\n)\n</code></pre> Parameters: Parameter Type Default Description <code>modifier</code> <code>Modifier</code> Optional Modifier to apply to the grid line. <code>gridLineStyle</code> <code>GridLineStyle</code> Required Style configuration for the grid line (color, stroke width, etc.)."},{"location":"guide/jetco-ui/Bar%20Chart/components/#xaxislabel","title":"XAxisLabel \ud83d\udcc9","text":"<p>What it does: The <code>XAxisLabel()</code> component is for labeling the X-axis of your bar chart. You can customize the style, enable text rotation, and even add a click event! \ud83d\udcac</p> Usage Example: <pre><code>XAxisLabel(\n    itemName = \"Label\",\n    xAxisTextStyle = yourTextStyle,\n    textRotateAngle = 45f,\n    enableTextRotate = true,\n    onLabelClick = { /* handle label click */ }\n)\n</code></pre> Parameters: Parameter Type Default Description <code>itemName</code> <code>String</code> Required The label text to display for the X-axis. <code>xAxisTextStyle</code> <code>TextStyle</code> Required Style for the label text (font size, color, etc.). <code>textRotateAngle</code> <code>Float</code> <code>0f</code> Angle to rotate the label. <code>enableTextRotate</code> <code>Boolean</code> <code>false</code> Whether to enable rotation for the label text. <code>onLabelClick</code> <code>() -&gt; Unit</code> Required Function to handle when the label is clicked."},{"location":"guide/jetco-ui/Bar%20Chart/components/#yaxisgridlines","title":"YAxisGridLines \ud83d\udccf","text":"<p>What it does: <code>YAxisGridLines()</code> helps you draw horizontal grid lines across the Y-axis of your bar chart. These lines assist in aligning data points and improving readability. \ud83c\udfaf</p> Usage Example: <pre><code>YAxisGridLines(\n    gridLineStyle = yourGridLineStyle,\n    yAxisStepHeight = 40.dp\n)\n</code></pre> Parameters: Parameter Type Default Description <code>gridLineStyle</code> <code>GridLineStyle</code> Required Style configuration for the grid lines (color, stroke width, etc.). <code>yAxisStepHeight</code> <code>Dp</code> Required Vertical spacing between each grid line along the Y-axis."},{"location":"guide/jetco-ui/Bar%20Chart/components/#yaxisscale","title":"YAxisScale \ud83e\uddee","text":"<p>What it does: The <code>YAxisScale()</code> component creates and displays the Y-axis scale labels along with an optional axis line. It automatically adjusts the scale based on your data. Perfect for keeping things tidy and informative! \ud83d\udcca</p> Usage Example: <pre><code>YAxisScale(\n    yAxisConfig = yourYAxisConfig,\n    yAxisStepHeight = 50.dp,\n    yAxisScaleStep = 10f,\n    barHeight = 200.dp\n)\n</code></pre> Parameters: Parameter Type Default Description <code>yAxisConfig</code> <code>YAxisConfig</code> Required Configuration for the Y-axis (text style, scale count, axis line, etc.). <code>yAxisStepHeight</code> <code>Dp</code> Required Height of each step in the Y-axis scale. <code>yAxisScaleStep</code> <code>Float</code> Required The step value used to calculate the Y-axis scale labels. <code>barHeight</code> <code>Dp</code> Required The total height of the Y-axis bar. <p>\ud83d\udd0d Want to Dive Deeper?</p> <p>If you're curious about how to fine-tune your charts, you\u2019ll want to explore PopUpConfig, GridLineStyle, and YAxisConfig. These configuration objects give you complete control over the appearance and behavior of popups, grid lines, and axis scales in your charts. To make things even easier, we've provided default configurations with sensible presets! \ud83d\udc49 Check out the PieChartConfigurations and BarChartDefaults for a head start on customizing your charts. You can use these defaults as-is or tweak them to match your app's style! \ud83c\udfa8 So go ahead, experiment, and make those charts shine! \ud83c\udf1f</p> <p>Pro Tip \ud83d\udca1</p> <p>Each of these components works seamlessly with Jetpack Compose, so you can combine them to create dynamic, interactive, and fully customizable bar charts. From showing detailed popups to customizing axis labels, it\u2019s all at your fingertips with JetCo! \ud83c\udf89</p> <p>Feel free to explore and play around with different configurations to match your app\u2019s style. \u2728</p> <p>Let\u2019s make your app\u2019s charts look amazing with JetCo! \ud83c\udfa8</p>"},{"location":"guide/jetco-ui/Bar%20Chart/models/","title":"BarChart Models","text":""},{"location":"guide/jetco-ui/Bar%20Chart/models/#barchart-models-data-to-make-your-bars-stand-tall","title":"BarChart Models: Data to Make Your Bars Stand Tall! \ud83d\udcca\ud83d\udcaa","text":"<p>Welcome to the world of <code>BarChartItem</code> and <code>GroupBarChartItem</code>\u2014the two heroic data classes that make your bar charts come alive! Let's break it down in a fun way! \ud83c\udf89</p>"},{"location":"guide/jetco-ui/Bar%20Chart/models/#barchartitem-single-barbig-impact","title":"BarChartItem: Single Bar\u2014Big Impact \ud83d\udca5","text":"<p>Each bar in your column bar chart is like a little soldier in the data army. Meet the class that makes it all possible: <code>BarChartItem</code>.</p> Parameter Type Description <code>name</code> <code>String</code> The name or label of the bar\u2014like naming your pet, but for data. \ud83d\udc3e This will typically show up on the X-axis. <code>value</code> <code>Float</code> The raw, unfiltered value of the bar. It\u2019s the number doing the heavy lifting. \ud83d\udcaa <code>floatValue</code> <code>Float</code> The normalized value of the bar, expressed between 0 and 1. Because who doesn\u2019t love seeing data in its neatest form? \ud83c\udf08"},{"location":"guide/jetco-ui/Bar%20Chart/models/#extension-function-mapping-like-a-pro","title":"Extension Function: Mapping Like a Pro \ud83c\udf10","text":"<p><code>mapToBarChartItems()</code> Here's how you can transform a simple <code>Map</code> into a beautiful list of <code>BarChartItem</code>. This extension function takes your bar data and makes sure it\u2019s normalized\u2014so no bar feels left out. \ud83d\ude04</p> Function Name Description <code>mapToBarChartItems</code> Converts a <code>Map&lt;String, Float&gt;</code> (key-value pairs) into a list of <code>BarChartItem</code>. Each value is divided by <code>maxValue</code>, ensuring everything fits proportionally in the chart. No overachievers here\u2014every bar plays fair! \ud83d\ude43 <pre><code>fun Map&lt;String, Float&gt;.mapToBarChartItems(maxValue: Float): List&lt;BarChartItem&gt; =\n    mapValues { (key, value) -&gt;\n        BarChartItem(\n            name = key,\n            value = value,\n            floatValue = (value / maxValue)\n        )\n    }.values.toList()\n</code></pre> <ul> <li><code>maxValue</code>: The big boss \ud83e\uddb8\u200d\u2642\ufe0f\u2014the maximum value among all bars. It sets the scale for all other bars, so they fall in line like good data soldiers. \ud83e\ude96</li> </ul>"},{"location":"guide/jetco-ui/Bar%20Chart/models/#groupbarchartitem-teamwork-makes-the-dream-work","title":"GroupBarChartItem: Teamwork Makes the Dream Work! \ud83c\udfc6","text":"<p>Now imagine you\u2019ve got groups of bars working together. Enter <code>GroupBarChartItem</code>. It\u2019s not just one bar showing off\u2014it\u2019s a team effort!</p> Parameter Type Description <code>name</code> <code>String</code> The name of the group of bars (X-axis label). It\u2019s like the team name in your data Olympics! \ud83c\udfc5 <code>barValues</code> <code>List&lt;BarValue&gt;</code> A list of bars within the group, each with its own raw and normalized values. Think of this as the team roster. \u26bd"},{"location":"guide/jetco-ui/Bar%20Chart/models/#barvalue-power-in-simplicity","title":"BarValue: Power in Simplicity \u26a1","text":"<p>The <code>BarValue</code> class represents an individual bar within a group. These bars don\u2019t compete\u2014they complement each other.</p> Parameter Type Description <code>value</code> <code>Float</code> The raw value of the bar\u2014because even in groups, every bar stands strong! \ud83d\udcaa <code>floatValue</code> <code>Float</code> The normalized value of the bar. This keeps the game fair by ensuring all bars are scaled relative to the largest one. It\u2019s like a sports league where everyone\u2019s the same height. \ud83d\ude02"},{"location":"guide/jetco-ui/Bar%20Chart/models/#extension-function-group-mapping-101","title":"Extension Function: Group Mapping 101 \ud83d\uddfa\ufe0f","text":"<p><code>mapToGroupBarChartItems()</code> Here\u2019s how you can convert a <code>Map</code> into a list of <code>GroupBarChartItem</code>\u2014complete with normalized values so your grouped bar charts look polished and professional. \ud83d\udc4c</p> Function Name Description <code>mapToGroupBarChartItems</code> Converts a <code>Map&lt;String, List&lt;Float&gt;&gt;</code> into a list of <code>GroupBarChartItem</code>. For each group, we normalize its bars based on <code>maxValue</code>. Every team has a star, but we keep the scale fair! \ud83c\udf1f <pre><code>fun Map&lt;String, List&lt;Float&gt;&gt;.mapToGroupBarChartItems(maxValue: Float): List&lt;GroupBarChartItem&gt; =\n    mapValues { (key, value) -&gt;\n        GroupBarChartItem(\n            name = key,\n            barValues = value.map {\n                BarValue(\n                    value = it,\n                    floatValue = (it / maxValue)\n                )\n            }\n        )\n    }.values.toList()\n</code></pre> <ul> <li><code>maxValue</code>: Again, the all-important big boss\u2014the maximum value across all groups. It ensures every bar is a team player. \ud83c\udfc5</li> </ul> <p>And there you have it\u2014your guide to turning boring old numbers into exciting, proportional, and well-organized bar chart items! Whether you\u2019re working with single bars or grouped bars, these classes and functions have your back. So go ahead, make those charts shine! \ud83c\udf1f</p> <p>And remember, bar charts aren\u2019t just a way to show data\u2014they\u2019re a way to impress your users. \ud83d\ude09</p>"},{"location":"guide/jetco-ui/Bar%20Chart/config/BarChartConfig/","title":"Bar Chart Configurations","text":"<p>This section covers the various data classes used to configure the appearance and behavior of the Bar Chart components in JetCo-UI. You can customize the bars, axes, grid lines, and pop-ups to your heart's content! \ud83c\udfa8</p>"},{"location":"guide/jetco-ui/Bar%20Chart/config/BarChartConfig/#barchartconfig","title":"BarChartConfig","text":"<p>The <code>BarChartConfig()</code> data class allows you to configure the individual bars in a bar chart. Think of it like picking the perfect outfit for each bar\u2014color, size, and style!</p> Parameter Name Description <code>color: Color</code> The color of the bar. Make your chart pop with vibrant colors! \ud83c\udf08 <code>height: Dp</code> The height of the bar. Taller bars = higher values \ud83d\udcc8. <code>width: Dp</code> The width of the bar. You can go thin or wide, just like pizza slices \ud83c\udf55! <code>shape: Shape</code> The shape of the bar (e.g., rounded corners). Round it off for a smoother look! Example Usage <pre><code>BarChartConfig(\n    color = Color.Red,\n    height = 150.dp,\n    width = 30.dp,\n    shape = RoundedCornerShape(8.dp)\n)\n</code></pre>"},{"location":"guide/jetco-ui/Bar%20Chart/config/BarChartConfig/#groupbarchartconfig","title":"GroupBarChartConfig","text":"<p>The <code>GroupBarChartConfig()</code> data class allows you to configure the individual bars in a group bar chart <code>GroupColumnBarChart()</code>, <code>GroupBarChartConfig()</code> has your back! Configure multiple bars with ease. \ud83d\udcca</p> Parameter Name Description <code>colors: List&lt;Color&gt;</code> A list of colors for the bars in each group. Group your bars by color for easy comparison! \ud83c\udfa8 <code>height: Dp</code> The height of the bars. Same as individual bars, but grouped! <code>width: Dp</code> The width of the bars in each group. Adjust for visibility! <code>shape: Shape</code> The shape of the bars (e.g., rounded corners). <code>gapBetweenBar: Dp</code> The gap between individual bars within a group. Don\u2019t let them get too cozy! <code>gapBetweenGroup: Dp</code> The gap between different groups of bars. Keep some breathing room between groups! \ud83d\ude0c Example Usage <pre><code>GroupBarChartConfig(\n    colors = listOf(Color.Red, Color.Green, Color.Blue),\n    height = 150.dp,\n    width = 30.dp,\n    shape = RoundedCornerShape(4.dp),\n    gapBetweenBar = 8.dp,\n    gapBetweenGroup = 16.dp\n)\n</code></pre>"},{"location":"guide/jetco-ui/Bar%20Chart/config/BarChartConfig/#xaxisconfig","title":"XAxisConfig","text":"<p>Customize the X-axis with <code>XAxisConfig()</code>. You can toggle axis lines, scales, and more! It\u2019s like giving your chart a stylish foundation. \u2699\ufe0f</p> Parameter Name Description <code>isAxisScaleEnabled: Boolean</code> Enables or disables the axis scale. Toggle this to show or hide axis markings! \ud83d\udccf <code>isAxisLineEnabled: Boolean</code> Enables or disables the axis line. Choose to show or hide the line itself! <code>axisLineWidth: Dp</code> The width of the axis line. Thicker lines for more emphasis! <code>axisLineShape: Shape</code> The shape of the axis line. Rounded or sharp\u2014your choice! <code>axisLineColor: Color</code> The color of the axis line. Make it stand out with bold colors! <code>textStyle: TextStyle</code> The style of the text for axis labels. Customize the font, size, and color! \u270d\ufe0f Example Usage <pre><code>XAxisConfig(\n    isAxisScaleEnabled = true,\n    isAxisLineEnabled = true,\n    axisLineWidth = 2.dp,\n    axisLineShape = RoundedCornerShape(2.dp),\n    axisLineColor = Color.Gray,\n    textStyle = TextStyle(color = Color.Black)\n)\n</code></pre>"},{"location":"guide/jetco-ui/Bar%20Chart/config/BarChartConfig/#yaxisconfig","title":"YAxisConfig","text":"<p>Much like the X-axis, the <code>YAxisConfig()</code> lets you control the vertical axis. Set the scale, line style, and even add prefixes and suffixes! \ud83c\udfaf</p> Parameter Name Description <code>isAxisScaleEnabled: Boolean</code> Enables or disables the axis scale. <code>isAxisLineEnabled: Boolean</code> Enables or disables the axis line. <code>axisLineWidth: Dp</code> The width of the axis line. <code>axisLineShape: Shape</code> The shape of the axis line. <code>axisLineColor: Color</code> The color of the axis line. <code>axisScaleCount: Int</code> The number of scale divisions on the Y-axis. More divisions = more precise data! <code>textStyle: TextStyle</code> The style of the text for axis labels. <code>textPrefix: String</code> A prefix to be added before the scale value (e.g., \"$\"). \ud83d\udcb5 <code>textPostfix: String</code> A postfix to be added after the scale value (e.g., \"%\"). \ud83d\udcca Example Usage <pre><code>YAxisConfig(\n    isAxisScaleEnabled = true,\n    isAxisLineEnabled = true,\n    axisLineWidth = 2.dp,\n    axisLineShape = RoundedCornerShape(2.dp),\n    axisLineColor = Color.Gray,\n    axisScaleCount = 5,\n    textStyle = TextStyle(color = Color.Black),\n    textPrefix = \"$\",\n    textPostfix = \"K\"\n)\n</code></pre>"},{"location":"guide/jetco-ui/Bar%20Chart/config/BarChartConfig/#gridlinestyle","title":"GridLineStyle","text":"<p>Add some structure to your chart with grid lines! The <code>GridLineStyle()</code> class gives you full control over the grid's look. \ud83c\udf10</p> Parameter Name Description <code>color: Color</code> The color of the grid lines. <code>strokeWidth: Dp</code> The width of the grid lines. <code>dashLength: Dp</code> The length of each dash in dashed grid lines. For that modern, segmented look! <code>gapLength: Dp</code> The gap between dashes in dashed grid lines. <code>totalGridLines: Int</code> The total number of grid lines in the chart. <code>dashCap: StrokeCap</code> The style of the stroke cap used for dashed lines. Rounded or straight, you decide! Example Usage <pre><code>GridLineStyle(\n    color = Color.LightGray,\n    strokeWidth = 1.dp,\n    dashLength = 4.dp,\n    gapLength = 2.dp,\n    totalGridLines = 5,\n    dashCap = StrokeCap.Round\n)\n</code></pre>"},{"location":"guide/jetco-ui/Bar%20Chart/config/BarChartConfig/#popupconfig","title":"PopUpConfig","text":"<p>The <code>PopUpConfig()</code> class lets you control the behavior and appearance of pop-ups in your bar chart. Show details in style! \ud83c\udf89</p> Parameter Name Description <code>enableXAxisPopUp: Boolean</code> Enables or disables pop-ups for X-axis labels. <code>enableBarPopUp: Boolean</code> Enables or disables pop-ups for the bars. <code>background: Color</code> The background color of the pop-ups. <code>shape: Shape</code> The shape of the pop-ups (e.g., rounded corners). <code>textStyle: TextStyle</code> The style of the text in the pop-ups. Example Usage <pre><code>PopUpConfig(\n    enableXAxisPopUp = true,\n    enableBarPopUp = true,\n    background = Color.Black,\n    shape = RoundedCornerShape(4.dp),\n    textStyle = TextStyle(color = Color.White)\n)\n</code></pre> <p>Quick Tips!</p> <ul> <li>Customization: Get creative with colors, shapes, and styles! \ud83c\udfa8 The more you customize, the more unique your charts will look.</li> <li>Performance: Large data sets or many grid lines might slow down rendering. \u26a1 Keep an eye on performance for smoother animations.</li> </ul>"},{"location":"guide/jetco-ui/Bar%20Chart/config/BarChartDefaults/","title":"Bar Chart Defaults","text":""},{"location":"guide/jetco-ui/Bar%20Chart/config/BarChartDefaults/#barchartdefaults-setting-up-like-a-pro","title":"BarChartDefaults: Setting Up Like a Pro \ud83c\udfd7\ufe0f\ud83d\udcca","text":"<p>This documentation will guide you through the default configurations for JetCo-UI's Bar Chart components. No need to start from scratch\u2014let BarChartDefaults handle it for you! \ud83d\ude0e</p>"},{"location":"guide/jetco-ui/Bar%20Chart/config/BarChartDefaults/#enter-transition-making-an-entrance","title":"Enter Transition: Making an Entrance! \ud83c\udfac","text":"<p><code>BarChartDefaults.enterTransitionVertically</code> Because even bars deserve a grand entrance, right? With our default transition, bars expand vertically when they first appear. They\u2019re not just data\u2014they\u2019re dramatic data. \ud83c\udfad</p> Parameter Type Default Value Description <code>enterTransitionVertically</code> <code>EnterTransition</code> <code>expandVertically</code> The bars will slide into view like they're on the red carpet. \ud83d\udc83"},{"location":"guide/jetco-ui/Bar%20Chart/config/BarChartDefaults/#column-bar-chart-config","title":"Column Bar Chart Config \ud83c\udfdb\ufe0f","text":"<p><code>BarChartDefaults.columnBarChartConfig()</code> Let\u2019s get serious (but not too serious \ud83d\ude1c). Here\u2019s how you configure the default columns in your bar chart\u2014clean, colorful, and totally customizable. Returns <code>ColumnBarChartConfig</code>.</p> Parameter Type Default Value Description <code>color</code> <code>Color</code> <code>Color(0xFFEFB8C8)</code> A soft, stylish color\u2014because pinkish is the new black! \ud83d\udc96 <code>height</code> <code>Dp</code> <code>200.dp</code> Height of each bar\u2014tall enough to grab attention! \ud83d\udccf <code>width</code> <code>Dp</code> <code>20.dp</code> Width of each bar\u2014just thick enough to make a statement. <code>shape</code> <code>Shape</code> <code>RoundedCornerShape(8.dp)</code> Rounded corners for that smooth finish. It\u2019s all about those curves. \ud83c\udf69"},{"location":"guide/jetco-ui/Bar%20Chart/config/BarChartDefaults/#group-bar-chart-config","title":"Group Bar Chart Config \ud83c\udfaf","text":"<p><code>BarChartDefaults.groupBarChartConfig()</code> Grouped bar charts: Like columns, but with friends! \ud83c\udf89 Here's how you can make your grouped bars pop with color and style.  Returns <code>GroupBarChartConfig</code>.</p> Parameter Type Default Value Description <code>colors</code> <code>List&lt;Color&gt;</code> A colorful list of blues and purples \ud83c\udf08 The default color palette\u2014because life\u2019s too short for boring charts. \ud83c\udfa8 <code>height</code> <code>Dp</code> <code>200.dp</code> Default height for each bar\u2014because size does matter. \ud83d\ude09 <code>width</code> <code>Dp</code> <code>20.dp</code> Bar width for that perfect group formation. <code>shape</code> <code>Shape</code> <code>RoundedCornerShape(6.dp)</code> Smooth, rounded corners to keep things easy on the eyes. \ud83d\udc41\ufe0f <code>gapBetweenBar</code> <code>Dp</code> <code>0.dp</code> How close the bars are\u2014don\u2019t worry, they like being next to each other. \ud83d\udc6b <code>gapBetweenGroup</code> <code>Dp</code> <code>20.dp</code> Distance between groups\u2014because sometimes, even bars need personal space. \ud83d\ude05"},{"location":"guide/jetco-ui/Bar%20Chart/config/BarChartDefaults/#x-axis-config","title":"X-Axis Config \ud83d\udccf","text":"<p><code>BarChartDefaults.xAxisConfig()</code> Ah, the good ol' X-axis. Your data would be lost without it. Here's how to give it some love with our default settings. Returns <code>XAxisConfig</code>.</p> Parameter Type Default Value Description <code>isAxisScaleEnabled</code> <code>Boolean</code> <code>true</code> Should the scale be enabled? Of course\u2014it\u2019s the axis, after all! <code>isAxisLineEnabled</code> <code>Boolean</code> <code>true</code> You want lines? We\u2019ve got lines. <code>axisLineWidth</code> <code>Dp</code> <code>2.dp</code> A nice solid line, just thick enough to say, \"I\u2019m here, respect me.\" \ud83d\udcaa <code>axisLineShape</code> <code>Shape</code> <code>RoundedCornerShape(3.dp)</code> Rounded edges, because even axes need some style. \u2728 <code>axisLineColor</code> <code>Color</code> <code>Color.LightGray</code> Light gray to keep things subtle, but strong. <code>textStyle</code> <code>TextStyle</code> <code>textStyle</code> The text style for those little numbers along the axis."},{"location":"guide/jetco-ui/Bar%20Chart/config/BarChartDefaults/#y-axis-config","title":"Y-Axis Config \ud83d\udcc8","text":"<p><code>BarChartDefaults.yAxisConfig()</code> Where would your bar chart be without the Y-axis? Floating in space, that\u2019s where. Let\u2019s ground those bars. Returns <code>YAxisConfig</code>.</p> Parameter Type Default Value Description <code>isAxisScaleEnabled</code> <code>Boolean</code> <code>true</code> Enable that Y-axis scale so your bars know where to stop. \ud83d\uded1 <code>isAxisLineEnabled</code> <code>Boolean</code> <code>true</code> Let the Y-axis stand tall with a solid line. <code>axisLineWidth</code> <code>Dp</code> <code>2.dp</code> Width of the line\u2014thick enough to guide the way. <code>axisLineShape</code> <code>Shape</code> <code>RoundedCornerShape</code> Shaping up nicely with rounded corners. <code>axisLineColor</code> <code>Color</code> <code>Color.LightGray</code> Classic light gray\u2014keeping it low-key. <code>axisScaleCount</code> <code>Int</code> <code>4</code> Four divisions\u2014because why complicate things? <code>textStyle</code> <code>TextStyle</code> <code>textStyle</code> Keeping the text style simple yet effective."},{"location":"guide/jetco-ui/Bar%20Chart/config/BarChartDefaults/#grid-lines-because-straight-lines-are-satisfying","title":"Grid Lines: Because Straight Lines Are Satisfying \ud83e\udde9","text":"<p><code>BarChartDefaults.gridLineStyle()</code> Grid lines add structure to your chart, and we all need a little more structure in our lives, right? \ud83d\udcd0 Returns <code>GridLineStyle</code>.</p> Parameter Type Default Value Description <code>color</code> <code>Color</code> <code>Color.LightGray</code> A nice, neutral gray. Sophisticated and subtle. \ud83c\udfa8 <code>strokeWidth</code> <code>Dp</code> <code>1.dp</code> Thin but effective\u2014like your favorite sharpie. \ud83d\udd8a\ufe0f <code>dashLength</code> <code>Dp</code> <code>8.dp</code> Dashes that are neither too long nor too short\u2014Goldilocks style. \ud83d\udc3b <code>gapLength</code> <code>Dp</code> <code>8.dp</code> The perfect gap to match the dash. Everything in harmony. \u2728 <code>totalGridLines</code> <code>Int</code> <code>4</code> Just enough lines to guide your eyes without overwhelming your senses. \ud83d\udc40 <code>dashCap</code> <code>StrokeCap</code> <code>StrokeCap.Square</code> Nice square ends to keep things sharp and tidy. \ud83d\uddc2\ufe0f"},{"location":"guide/jetco-ui/Bar%20Chart/config/BarChartDefaults/#pop-up-config-surprise","title":"Pop-up Config: Surprise! \ud83c\udf89","text":"<p><code>BarChartDefaults.popUpConfig()</code> Because sometimes you want to show off those bar values with a little flair. Pop-ups make it happen. Returns <code>PopUpConfig</code>.</p> Parameter Type Default Value Description <code>enableXAxisPopUp</code> <code>Boolean</code> <code>true</code> X-axis labels can pop up like \"Hey, look at me!\" \ud83d\udcac <code>enableBarPopUp</code> <code>Boolean</code> <code>true</code> Bars get their pop-ups too\u2014sharing is caring! <code>background</code> <code>Color</code> <code>Color(0xFFCCC2DC)</code> Soft purplish-gray background to make those values pop. <code>shape</code> <code>Shape</code> <code>RoundedCornerShape(25)</code> Smooth rounded corners because sharp edges are so yesterday. <code>textStyle</code> <code>TextStyle</code> <code>textStyle</code> Same stylish text\u2014because consistency is key. \ud83d\udd11 <p>And there you have it! Bar charts have never looked better\u2014or more fun! \ud83e\udd73 Ready to rock your data with some default magic? Let's go! \ud83d\udca5</p>"},{"location":"guide/jetco-ui/Pie%20Chart/PieChart/","title":"PieChart","text":"<p>The <code>PieChart()</code> composable is part of the JetCo-UI library, designed to provide a highly customizable pie chart visualization for Jetpack Compose. With support for animations, color customization, and interaction handling, it enables developers to easily integrate visually appealing pie charts into their Android applications.</p> <p>Pie Chart | Sample</p>"},{"location":"guide/jetco-ui/Pie%20Chart/PieChart/#piechart-function","title":"PieChart Function","text":""},{"location":"guide/jetco-ui/Pie%20Chart/PieChart/#function-signature","title":"\u2699\ufe0f Function Signature","text":"<pre><code>@Composable\nfun PieChart(\n    modifier: Modifier = Modifier,\n    chartData: Map&lt;String, Float&gt;,\n    pieChartConfig: PieChartConfig = PieChartDefaults.pieChartConfig(),\n    pieChartAnimationConfig: PieChartAnimationConfig = PieChartDefaults.pieChartAnimationConfig(),\n    chartItemModifier: Modifier = Modifier,\n    chartItems: (@Composable (List&lt;PieChartEntry&gt;) -&gt; Unit)? = null,\n    onItemClick: ((PieChartEntry) -&gt; Unit)? = null\n)\n</code></pre>"},{"location":"guide/jetco-ui/Pie%20Chart/PieChart/#parameters","title":"\ud83d\udccb Parameters","text":"Parameter Type Description Default Value modifier <code>Modifier</code> Modifier applied to the pie chart container. Controls the chart size, padding, etc. <code>Modifier</code> chartData <code>Map&lt;String, Float&gt;</code> A map where each key represents a label and its corresponding value forms the data for each slice of the pie chart. Required pieChartConfig <code>PieChartConfig</code> Configuration object that defines chart properties like colors, radius, and label styles. <code>PieChartDefaults.pieChartConfig()</code> pieChartAnimationConfig <code>PieChartAnimationConfig</code> Configuration for animations such as duration and rotation. <code>PieChartDefaults.pieChartAnimationConfig()</code> chartItemModifier <code>Modifier</code> Modifier for the additional chart items like labels or values. <code>Modifier</code> chartItems <code>@Composable ((List&lt;PieChartEntry&gt;) -&gt; Unit)?</code> A composable that renders the list of chart items (labels, values) for each pie slice. <code>null</code> onItemClick <code>((PieChartEntry) -&gt; Unit)?</code> Lambda triggered when a pie chart slice is clicked, providing the selected <code>PieChartEntry</code>. <code>null</code>"},{"location":"guide/jetco-ui/Pie%20Chart/PieChart/#piechartconfig","title":"PieChartConfig","text":"<p><code>PieChartConfig</code> is a data class that defines the visual aspects of the pie chart. It includes options like colors, stroke width, and text styles.</p>"},{"location":"guide/jetco-ui/Pie%20Chart/PieChart/#default-configuration","title":"\ud83c\udfa8 Default Configuration","text":"<p>You can easily get a default configuration using:</p> <pre><code>val pieChartConfig = PieChartDefaults.pieChartConfig()\n</code></pre>"},{"location":"guide/jetco-ui/Pie%20Chart/PieChart/#example-usage","title":"Example Usage","text":"<p>Here\u2019s a sample implementation that demonstrates how to use the <code>PieChart</code> composable in your app:</p> <pre><code>val chartData = mapOf(\n    \"Food\" to 40f,\n    \"Rent\" to 30f,\n    \"Savings\" to 20f,\n    \"Misc\" to 10f\n)\n\nPieChart(\n    modifier = Modifier.fillMaxSize(),\n    chartData = chartData,\n    pieChartConfig = PieChartDefaults.pieChartConfig(),\n    pieChartAnimationConfig = PieChartDefaults.pieChartAnimationConfig(),\n    onItemClick = { entry -&gt; Log.d(\"PieChart\", \"Clicked on ${entry.name}\") }\n)\n</code></pre>"},{"location":"guide/jetco-ui/Pie%20Chart/PieChart/#customizing-your-piechart","title":"\ud83d\udee0\ufe0f Customizing Your PieChart","text":"<p>The PieChartConfig allows you to customize various properties of the chart. For example, you can customize the colors and the text style of the labels:</p> <pre><code>val customConfig = PieChartConfig(\n    colorsList = listOf(Color.Red, Color.Blue, Color.Green, Color.Yellow),\n    radius = 120.dp,\n    labelTextStyle = TextStyle(\n        fontSize = 16.sp,\n        color = Color.Black\n    )\n)\n\nPieChart(\n    modifier = Modifier.size(300.dp),\n    chartData = chartData,\n    pieChartConfig = customConfig\n)\n</code></pre>"},{"location":"guide/jetco-ui/Pie%20Chart/PieChart/#adding-animations","title":"\ud83c\udfa5 Adding Animations","text":"<p>Use the PieChartAnimationConfig to animate the pie chart with different effects:</p> <pre><code>val animationConfig = PieChartAnimationConfig(\n    animationDuration = 2000,\n    animateRotation = true,\n    numberOfRotations = 2\n)\n\nPieChart(\n    modifier = Modifier.size(300.dp),\n    chartData = chartData,\n    pieChartAnimationConfig = animationConfig\n)\n</code></pre>"},{"location":"guide/jetco-ui/Pie%20Chart/PieChart/#exploring-more","title":"Exploring More","text":""},{"location":"guide/jetco-ui/Pie%20Chart/PieChart/#event-handling","title":"\u26a1 Event Handling","text":"<p>Want to track user interactions? The <code>onItemClick</code> parameter allows you to handle click events on each pie slice:</p> <pre><code>PieChart(\n    chartData = chartData,\n    onItemClick = { entry -&gt; \n        // Handle the clicked slice data\n        Log.d(\"PieChart\", \"Clicked on ${entry.name}, value: ${entry.value}\")\n    }\n)\n</code></pre>"},{"location":"guide/jetco-ui/Pie%20Chart/PieChart/#displaying-chart-items","title":"\ud83d\udcca Displaying Chart Items","text":"<p>You can pass a custom <code>chartItems</code> composable to display a list of items representing the pie chart data. This allows you to provide additional information, like labels and values, outside the chart itself:</p> <pre><code>PieChart(\n    chartData = chartData,\n    chartItems = { items -&gt; \n        Column {\n            items.forEach { item -&gt;\n                Text(text = \"${item.name}: ${item.value}\")\n            }\n        }\n    }\n)\n</code></pre> <p>Check out Sample usage of the PieChart.</p> <p>The <code>PieChart</code> composable from JetCo-UI provides a robust, customizable solution for integrating pie charts into your Android applications. Whether you need simple visualizations or highly interactive charts, <code>PieChart</code> offers the flexibility and ease of use to meet your needs.</p> <p>Explore more in the JetCo-UI GitHub Repository and check out the comprehensive guides and samples to see how to make the most out of this powerful chart component!</p>"},{"location":"guide/jetco-ui/Pie%20Chart/PieChartConfigurations/","title":"PieChartConfigurations","text":"<p>This section covers the <code>PieChartConfig</code> and <code>PieChartAnimationConfig</code> data classes, which allow customization of the appearance, behavior, and animation of a Pie Chart component in JetCo-UI. </p>"},{"location":"guide/jetco-ui/Pie%20Chart/PieChartConfigurations/#piechartconfig","title":"PieChartConfig","text":"<p>This class provides various parameters to control the visual and functional behavior of a Pie Chart. Customize your pie chart to fit your needs! Here are the options:</p> Parameter Name Description <code>radius: Dp</code> Defines the size of the pie chart. Bigger radius = bigger pie (but sadly, no extra calories)! <code>thickness: Dp</code> Determines the width of each pie slice. Thin crust or thick? You decide! \ud83d\ude09 <code>colorsList: List&lt;Color&gt;</code> List of colors for the slices. If you run out of colors, we\u2019ll just start repeating them. It's like a colorful carousel \ud83c\udfa0! <code>enableChartItems: Boolean</code> Enables or disables labels or chips on your pie chart. \ud83c\udf55 Toggle this to show or hide toppings! <code>isChartItemScrollEnable: Boolean</code> Enables or disables scrolling of chart items when they overflow. No more squishing too many items in a small space! <code>textStyle: TextStyle</code> Defines the text style for labels and chips displayed inside the pie chart. Give your chart some pizzazz! \u2728 Example Usage <p>Here\u2019s how to use <code>PieChartConfig</code> to make your pie chart as sweet as you like:</p> <pre><code>PieChartConfig(\n    radius = 150.dp,\n    thickness = 25.dp,\n    colorsList = listOf(Color.Red, Color.Blue, Color.Green), \n    enableChartItems = true,\n    isChartItemScrollEnable = false,\n    textStyle = TextStyle(color = Color.Blue)\n)\n</code></pre>"},{"location":"guide/jetco-ui/Pie%20Chart/PieChartConfigurations/#piechartanimationconfig","title":"PieChartAnimationConfig","text":"<p>Who doesn't love a dramatic entrance? Use <code>PieChartAnimationConfig</code> to add a bit of flair to how your pie chart appears. Customize the animation with these options:</p> Parameter Name Description <code>enableAnimation: Boolean</code> A flag to enable or disable animations. Switch it on for a pie chart that glides into view like butter melting on toast! \ud83e\uddc8 <code>animationDuration: Int</code> The length of the animation in milliseconds. Want a slow-motion effect? Increase the time! \u23f1\ufe0f <code>animationRotations: Int</code> Number of rotations during the animation. Spin your pie like a DJ spinning records! \ud83c\udf9b\ufe0f Example Usage <p>Here\u2019s how to add some cool animations to your pie chart:</p> <pre><code>PieChartAnimationConfig(\n    enableAnimation = true,\n    animationDuration = 1000,  // One second of spinning magic!\n    animationRotations = 2     // Two full spins before the chart settles in.\n)\n</code></pre> <p>Want a shortcut?</p> <p>If you only want to tweak a few parameters and keep everything else default, check out the PieChartDefaults. This will save you time and keep things simple!</p> <p>Additional Notes</p> <ul> <li>Customization: There are lots of ways to make your pie chart unique! \ud83c\udfa8 Don\u2019t be afraid to experiment. It's like decorating a cake\u2014mix and match the flavors (or colors) until you\u2019re happy with the result! </li> <li>Performance: Animations and large data sets can make things a bit slow. \u26a1 If you notice things lagging, try turning off animations or reducing the number of slices. Keep it smooth and buttery! </li> </ul>"},{"location":"guide/jetco-ui/Pie%20Chart/PieChartDefaults/","title":"PieChartDefaults","text":"<p>The <code>PieChartDefaults</code> object is like your best friend when working with Pie Charts in JetCo-UI. It provides some awesome default configurations, so you don\u2019t have to sweat the small stuff\u2014unless you really want to! \ud83d\ude09</p> <p>Want to create a Pie Chart that looks sharp without digging into every detail? Or maybe you just want to tweak a thing or two? <code>PieChartDefaults</code> has your back with factory methods for creating PieChartConfig and PieChartAnimationConfig.</p> <p>Let\u2019s dive in!</p>"},{"location":"guide/jetco-ui/Pie%20Chart/PieChartDefaults/#piechartconfig","title":"PieChartConfig","text":"<p>The <code>pieChartConfig()</code> function helps you control the look and feel of your Pie Chart. It has some default values, but you can customize it if you're feeling fancy. Returns PieChartConfig. Here's what you can tweak:</p> Parameter Name Description <code>radius: Dp</code> How big should your pie be? \ud83c\udf55 Default: <code>75.dp</code> <code>thickness: Dp</code> How thick do you like your slices? \ud83d\ude0b Default: <code>25.dp</code> <code>colorsList: List&lt;Color&gt;</code> Want some pretty colors? Default colors are already set for you. \ud83c\udfa8 <code>enableChartItems: Boolean</code> Show extra chart items like labels or legends. Default: <code>true</code> <code>isChartItemScrollEnable: Boolean</code> If you have too many items (nice problem to have), enable scrolling. Default: <code>false</code> <code>textStyle: TextStyle</code> Customize the text style\u2014font size, color, etc. Default: something sensible! \ud83d\udc4d Default Values <p>Here\u2019s what happens if you let the defaults do their magic:</p> <pre><code>PieChartDefaults.pieChartConfig(\n    radius = 75.dp,\n    thickness = 25.dp,\n    colorsList = defaultColorList, // A pre-made color palette, because who has time for that? \ud83c\udfa8\n    enableChartItems = true,\n    isChartItemScrollEnable = false,\n    textStyle = TextStyle(\n        fontSize = 14.sp,\n        fontFamily = FontFamily.Default,\n        fontWeight = FontWeight.Normal,\n        color = Color.Black\n    )\n)\n</code></pre> Example Usage <p>Just change what you care about, leave the rest to defaults\u2014easy peasy!</p> <pre><code>val customConfig = PieChartDefaults.pieChartConfig(\n    radius = 100.dp,  \n    thickness = 30.dp, \n    colorsList = listOf(Color.Cyan, Color.Magenta) \n)\n</code></pre>"},{"location":"guide/jetco-ui/Pie%20Chart/PieChartDefaults/#piechartanimationconfig","title":"PieChartAnimationConfig","text":"<p>The <code>pieChartAnimationConfig()</code> function lets you add some pizzazz to your Pie Chart with animations. You control how it spins and dances (well, sort of). Returns PieChartAnimationConfig.</p> Parameter Name Description <code>enableAnimation: Boolean</code> Want animation? Of course you do! Default: <code>true</code> \ud83c\udf89 <code>animationDuration: Int</code> How long should the animation take (in milliseconds)? Default: <code>1000</code>ms \u23f3 <code>animationRotations: Int</code> How many spins before it stops? Default: <code>11</code> (because why not?) \ud83d\udcab Default Values <p>Here\u2019s what the defaults do for you:</p> <pre><code>PieChartDefaults.pieChartAnimationConfig(\n    enableAnimation = true,\n    animationDuration = 1000,  // Enough time for a quick coffee \u2615\n    animationRotations = 11   // Like a ballerina doing pirouettes! \ud83e\ude70\n)\n</code></pre> Example Usage <p>If you\u2019re feeling a bit rebellious and want to slow things down:</p> <pre><code>val animationConfig = PieChartDefaults.pieChartAnimationConfig(\n    animationDuration = 2000 // Now we're talking... slow and smooth \ud83d\udc22\n)\n</code></pre> Example of PieChartDefaults in 'PieChart' <pre><code>PieChart(\n    modifier = Modifier.fillMaxWidth(),\n    chartData = chartData,\n    pieChartConfig = PieChartDefaults.pieChartConfig(\n        radius = 30.dp,\n        isChartItemScrollEnable = false\n    ),\n    pieChartAnimationConfig = PieChartDefaults.pieChartAnimationConfig(\n        animationDuration = 2000\n    )\n)\n</code></pre> <p>Additional Notes \ud83d\udca1</p> <ul> <li>Easy Customization: With <code>PieChartDefaults</code>, you can skip the boring setup and get straight to the fun stuff! Just tweak what you need and leave the rest to the defaults. \ud83c\udfaf</li> <li>Flexibility: Want to keep it simple? Use the defaults. Want to go all-in on customization? No problem! \ud83d\udcaa</li> <li>Performance Tip: If you\u2019ve got a lot of slices or wild animations, your device might get a little warm. Keep an eye on performance and adjust as needed! \ud83d\udd25</li> </ul> <p>So, whether you\u2019re going for a minimalist pie or one with all the bells and whistles, <code>PieChartDefaults</code> makes it easy to get it just right! \ud83c\udfa8\ud83e\udd67</p>"},{"location":"sample/jetco-ui/","title":"JetCo-UI Sample","text":"<p>Integrate the JetCo-UI Library into your project, get sample code snippets for various UI components, with annotations on how to enhance your setup and avoid common pitfalls.</p>"},{"location":"sample/jetco-ui/#adding-jetco-ui-library-dependency","title":"Adding JetCo-UI Library Dependency","text":"<p>To start using the JetCo-UI library in your Jetpack Compose project, follow these steps to add the dependency: </p> Kotlin DSL Version CatelogKotlin DSLGroovy <pre><code>// add the library in libs.versions.toml\n[versions]\nui = \"&lt;latest-version&gt;\" // jetco-ui version\n\n[libraries]\njetco-ui = { module = \"com.developerstring.jetco:ui\", version.ref = \"ui\" }\n\n// now implement in build.gradle.kts\nimplementation(libs.jetco.ui)\n</code></pre> <pre><code>// implementation in build.gradle.kts\ndependencies {\n    implementation(\"com.developerstring.jetco:ui:&lt;latest-version&gt;\")\n}\n</code></pre> <pre><code>// implement in build.gradle\ndependencies {\n    implementation 'com.developerstring.jetco:ui:&lt;latest-version&gt;'\n}\n</code></pre> <p>Replace <code>&lt;latest-version&gt;</code> with the latest version of the library from .</p>"},{"location":"sample/jetco-ui/#ui-components","title":"UI Components","text":""},{"location":"sample/jetco-ui/#1-pie-chart","title":"1. Pie Chart","text":"<p>The <code>PieChart</code> is a composable function that draws a pie chart based on the provided data and configurations. The PieChart supports animation, custom colors, and displays additional chart items. Here's a simple setup:</p> <pre><code>@Composable\nfun PieChartExample() {\n    val chartData = listOf(\n        Pair(\"Test-1\", 50f),\n        Pair(\"Test-2\", 80f),\n        Pair(\"Test-3.beta\", 30f),\n        Pair(\"Test-4\", 90f),\n        Pair(\"Test-5\", 45f),\n    )\n\n    PieChart(\n        modifier = Modifier.fillMaxWidth(),\n\n        // The data for the pie chart, Map&lt;String, Float&gt;\n        chartData = chartData,\n\n        // Configuration for the pie chart, providing options for appearance and behavior\n        pieChartConfig = PieChartDefaults.pieChartConfig(\n            isChartItemScrollEnable = false\n            // You can further customize the pie chart's appearance by adjusting:\n            // - color list, radius, thickness, enableChartItems, and more.\n        )\n\n        // Additional optional parameters to enhance the pie chart\n        // Like: animation pieChartAnimationConfig, chartItemModifier, chartItems, onItemClick, etc.\n    )\n}\n</code></pre> <p>To customize the pie chart, leverage the configuration functions provided by <code>PieChartDefaults</code>. This allows you to make specific changes while maintaining default settings for other properties. For complete customization, consider using the <code>Configuration Data Classes</code> directly. While customizing the colors to match your theme, ensure contrast between colors of the pie chart. To learn more Pie Chart please refer to <code>Guide</code></p> <p>Pie Chart</p>"},{"location":"sample/jetco-ui/#2-column-bar-chart","title":"2. Column Bar Chart","text":"<p>Use the <code>ColumnBarChart</code> component to display a bar chart with customizable appearance. This chart represents data using vertical bars with various customization options including animation, axis configurations, and pop-up information. It supports features like axis scaling, grid lines, and bar pop-ups for interactive data visualization. Here\u2019s how you can set it up:</p> <pre><code>@Composable\nfun ColumnBarChartExample() {\n    val chartData = listOf(\n        Pair(\"Test-1\", 50f),\n        Pair(\"Test-2\", 80f),\n        Pair(\"Test-3.beta\", 30f),\n        Pair(\"Test-4\", 90f),\n        Pair(\"Test-5\", 45f),\n    )\n\n    ColumnBarChart(\n        modifier = Modifier,\n\n        // The data for the chart, Map&lt;String, Float&gt;\n        chartData = chartData,\n\n        // The maximum value for the bars in the chart (used to normalize the bar heights, defining the y-axis scale).\n        maxBarValue = 100f, // If null, it is determined from the chartData. Defaults to null.\n\n        // Configuration for the bar's width, shape, and other appearance settings\n        barChartConfig = BarChartDefaults.columnBarChartConfig(\n            width = 20.dp,\n            shape = CircleShape\n        ),\n\n        // Configuration for the grid lines in the background of the chart\n        gridLineStyle = BarChartDefaults.gridLineStyle(\n            color = Color(0xFF5700CA)\n        ),\n\n        // Enable or disable text rotation on the x-axis labels.\n        enableTextRotate = true\n\n        // Additional optional parameters to enhance the Column Bar Chart\n        // Like: yAxisConfig, xAxisConfig, popUpConfig, animations, textRotateAngle, onBarClicked and more.\n    )\n}\n</code></pre> <p>To customize the Column Bar Chart, leverage the parameters and configuration functions provided by <code>BarChartDefaults</code>. This allows you to make specific changes while maintaining default settings for other properties. For complete customization, consider using the <code>Configuration Data Classes</code> like <code>BarChartConfig</code>, <code>XAxisConfig</code>, <code>YAxisConfig</code>, <code>PopUpConfig</code>, and <code>GridLineStyle</code>directly. While customizing the colors to match your theme, ensure contrast between theme colors and Chart colors. To learn more Column Bar Chart please refer to <code>Guide</code></p> <p>Column Bar</p> <p>On Label Click</p>"},{"location":"sample/jetco-ui/#3-group-column-bar-chart","title":"3. Group Column Bar Chart","text":"<p>The <code>GroupColumnBarChart</code> displays a group column bar chart, where each group contains multiple bars representing different categories. It is highly customizable, supporting various UI configurations like axis styles, grid lines, animations, popups, and more. Here\u2019s how you can set it up:</p> <pre><code>@Composable\nfun GroupColumnBarChartExample() {\n    val groupData = listOf(\n        \"Q1\" to listOf(50f, 80f, 60f),\n        \"Q2\" to listOf(70f, 40f, 90f),\n        \"Q3\" to listOf(90f, 30f, 70f),\n        \"Q4\" to listOf(60f, 90f, 80f)\n    )\n\n    GroupColumnBarChart(\n        modifier = Modifier.fillMaxWidth(),\n\n        // The data for the group column bar chart, Map&lt;String, List&lt;Float&gt;&gt;\n        chartData = groupData,\n\n        // The maximum value for the bars in the chart (used to normalize the bar heights, defining the y-axis scale).\n        maxBarValue = 100f, // If null, it is determined from the chartData. Defaults to null.\n\n        // Configuration for the group column bar chart, providing options for the bar appearance\n        groupBarChartConfig = BarChartDefaults.groupBarChartConfig(\n            width = 20.dp, // Set the width of each bar in the group\n            shape = RoundedCornerShape(20),\n            gapBetweenBar = 2.dp // Space between each bar in the group\n        ),\n\n        // Configuration for the grid lines in the background of the chart\n        gridLineStyle = BarChartDefaults.gridLineStyle(\n            color = Color(0xFFFFFFFF)\n        ),\n\n        // Enable or disable text rotation on the x-axis labels.\n        enableTextRotate = false\n\n        // Additional optional parameters to enhance the Column Bar Chart\n        // Like: yAxisConfig, xAxisConfig, popUpConfig, animations, textRotateAngle, onBarClicked and more.\n    )\n}\n</code></pre> <p>To customize the <code>GroupColumnBarChart</code>, leverage the parameters and configuration functions provided by <code>BarChartDefaults</code>. This allows you to make specific changes while maintaining default settings for other properties. For complete customization, consider using the <code>Configuration Data Classes</code> like <code>GroupBarChartConfig</code>, <code>XAxisConfig</code>, <code>YAxisConfig</code>, <code>PopUpConfig</code>, and <code>GridLineStyle</code>directly. While customizing the colors to match your theme, ensure contrast between theme colors and Chart colors. To learn more Group Column Bar Chart please refer to <code>Guide</code></p> <p>Ensure the datasets are visually distinguishable, especially when the chart is dense with data. Consider using different colors for each dataset.</p> <p>Group Column Bar Chart</p> <p>On Bar Click</p> <p>On Label Click</p>"},{"location":"sample/jetco-ui/#4-extended-column-bar-chart","title":"4. Extended Column Bar Chart","text":"<p>If you need more control over the behavior of the chart (e.g., clicking on a bar), use <code>ExtendedColumnBarChart</code>:</p> <pre><code>@Composable\nfun ExtendedColumnBarChartExample() {\n\n    val chartData = listOf(\n        Pair(\"Test-1\", 50f),\n        Pair(\"Test-2\", 80f),\n        Pair(\"Test-3.beta\", 30f),\n        Pair(\"Test-4\", 90f),\n        Pair(\"Test-5\", 45f),\n    )\n\n    ExtendedColumnBarChart(\n        modifier = Modifier,\n\n        // The data for the column bar chart, Map&lt;String, Float&gt;\n        chartData = chartData,\n\n        // The maximum length for the text labels on the X-axis to prevent overflow\n        maxTextLengthXAxis = 6,\n\n        // The maximum value for the bars in the chart (used to normalize the bar heights, defining the y-axis scale).\n        maxBarValue = 100f, // If null, it is determined from the chartData. Defaults to null.\n\n        // Custom label design for the Y-axis scale. The `value` parameter represents the Y-axis label text.\n        yAxisScaleLabel = { value -&gt;\n            // Card component for styling the Y-axis label with background color and rounded corners\n            Card(\n                colors = CardDefaults.cardColors(PurpleGrey80), // Set background color of the card\n                shape = RoundedCornerShape(20) // Round the corners of the card\n            ) {\n            // Display the text inside the card\n            Text(text = value)\n            }\n        },\n\n        // Custom popup that appears when a bar is clicked, text based on the bar's value\n        barPopUp = { text -&gt;\n            // Display the popup with the formatted text using the PopUpLayout component\n            PopUpLayout(text = text)\n        },\n\n        // Custom popup that appears when an X-axis label is clicked, showing the full text\n        labelPopUp = { text -&gt;\n            // Display the popup with the clicked label text\n            PopUpLayout(text = text)\n        },\n\n        // Custom bar design for the chart, with each bar formatted as a card\n        barDesign = { text -&gt;\n            // Format the bar's value to 2 decimal places using DecimalFormat\n            val decimalFormat = DecimalFormat(\"##.##\").format(text.toFloat())\n            // Card component to create the bar with specific design properties\n            Card(\n                modifier = Modifier.fillMaxSize(), // Fill the available size for the bar\n                colors = CardDefaults.cardColors(containerColor = Pink40), // Set bar color\n                elevation = CardDefaults.elevatedCardElevation(defaultElevation = 20.dp) // Set elevation for shadow effect\n            ) {\n                // Spacer for padding\n                Spacer(modifier = Modifier.height(10.dp))\n                // Display the formatted text inside the bar, rotated by -90 degrees\n                Text(\n                    text = decimalFormat,\n                    modifier = Modifier.rotate(-90f),\n                    color = Color.White // Set text color\n                )\n            }\n        },\n\n        // Additional optional parameters to enhance the Extended Column Bar Chart\n        // Like: yAxisConfig, xAxisConfig, popUpConfig, animations, textRotateAngle, onBarClicked and more. \n        // If custom design is implemented then configuration of that component will no longer be applied. \n    )\n}\n\n@Composable\nfun PopUpLayout(text: String) {\n\n    Box(\n        modifier = Modifier\n            .clip(shape = RoundedCornerShape(100))\n            .background(LightBlue)\n    ) {\n        Box(\n            modifier = Modifier\n                .padding(8.dp)\n                .clip(shape = RoundedCornerShape(100))\n                .background(UIBlue),\n            contentAlignment = Alignment.Center\n        ) {\n            Text(\n                modifier = Modifier.padding(5.dp),\n                text = text,\n                color = Color.White\n            )\n        }\n    }\n\n}\n</code></pre> <p>If custom design is implemented then configuration of that component will no longer be applied.</p> <pre><code>    When a custom design (like `barDesign`, `yAxisScaleLabel`, etc.) is implemented, \n    it overrides the default configuration for that specific component.\n    This means any default configuration properties (e.g., `BarChartDefaults`) related \n    to that component will no longer be applied, as your custom implementation takes precedence.\"\n</code></pre> <p>For full documentation / detailed information on customization and usability, this <code>Sample</code> section focuses on providing basic usage examples of the components. If you're looking for in-depth customization options, configuration data classes, default objects, functions, and additional features, please refer to the <code>Guide</code> section for comprehensive details.</p> <p>Extended Column Bar Chart</p> <p>On Bar Click</p> <p>On Label Click</p> <p>These examples show how easily JetCo UI components can be integrated into your project. For any <code>assistance</code> | <code>questions</code> | <code>queries</code> | <code>help</code> please follow the instruction on the <code>Community</code> Section</p>"}]}